{"version":3,"sources":["../../src/Modal/Modal.js"],"names":["Modal","props","modalRef","ModalStore","modalStore","currentStatus","openModal","mobileFooterOpened","display","headerElements","isMobile","SWF_MODAL","MOBILE_REGEXP","test","navigator","userAgent","console","log","styles","setState","defaultProps","showPopover","popoverContent","propTypes","PropTypes","bool","shape","tagline","object","content","actions","oneOf","number"],"mappings":"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","sourcesContent":["import classnames from \"classnames\";\nimport {SWF_MODAL} from \"./constants\";\nimport styles from \"./styles.scss\";\nimport PropTypes from \"prop-types\";\nimport Button from \"../Button/Button\";\nimport {useState, useRef} from \"react\";\n\nimport {observer} from \"mobx-react-lite\";\nimport {ModalStore} from \"./ModalStore\";\n\nconst Modal = observer((props) => {\n    const modalRef = useRef(null);\n    const [modalStore] = useState(() => new ModalStore({...props}))\n    const {currentStatus, openModal, mobileFooterOpened} = modalStore;\n    const {display, headerElements} = props;\n    const isMobile = SWF_MODAL.MOBILE_REGEXP.test(navigator.userAgent);\n\n    console.log(currentStatus, openModal, mobileFooterOpened)\n\n    return (<>\n            <style type=\"text/css\">{styles}</style>\n            <div className=\"modal-overlay\"\n                 ref={modalRef}\n            >\n                <div className=\"modal\">\n                    <div className={classnames({\n                        \"modal-dialog\": true,\n                        [`--${display}`]: true,\n                        [`--full`]: isMobile\n                    })}>\n                        <div className={classnames({\n                            \"modal-header\": true,\n                            \"--mobile\": isMobile,\n                            \"--desktop-content\": !isMobile && headerElements === 2,\n                            \"--desktop\": !isMobile && headerElements === 3\n                        })}>\n                            <div className=\"main-buttons\">\n                                {/*{isMobile ? this.mobileButtons() : this.desktopButtons()}*/}\n                            </div>\n                            <div className=\"header-content\">\n                                <slot name=\"header\"/>\n                            </div>\n                            {\n                                headerElements === 3 ? <div className=\"additional-buttons\">\n                                    {isMobile ?\n                                        <Button\n                                            icon=\"x\"\n                                            variant=\"primary\"\n                                            bare={true}\n                                            size=\"md\"\n                                            configAria={{\"button\": {\"aria-label\": \"Show Actions\"}}}\n                                            tooltipContent=\"Show Actions\"\n                                            onClick={() => this.setState({mobileFooterOpened: true})}\n                                        />\n                                        :\n                                        <slot name=\"header-buttons\"/>}\n                                </div> : \"\"\n                            }\n\n                        </div>\n                        <div\n                            className=\"modal-body\"\n                        >\n                            <slot name=\"body\"/>\n                        </div>\n                        {isMobile\n                            ?\n                            <div\n                                className={classnames({\n                                    \"menu-background\": true,\n                                    \"--active\": mobileFooterOpened\n                                })}\n                            />\n                            :\n                            \"\"}\n                        <div className={classnames({\n                            \"modal-footer\": true,\n                            \"--mobile\": isMobile,\n                            \"--active\": mobileFooterOpened\n                        })}>\n                            {isMobile ?\n                                <div className=\"footer-content\">\n                                    <slot name=\"footer\"/>\n                                    <slot name=\"header-buttons\"/>\n                                </div>\n                                :\n                                <slot name=\"footer\"/>\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n});\n\n// class Modal extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.modalRef = React.createRef();\n//         this.expand = this.expand.bind(this);\n//         this.desktopButtons = this.desktopButtons.bind(this);\n//         this.mobileButtons = this.mobileButtons.bind(this);\n//         this.renderPopover = this.renderPopover.bind(this);\n//\n//         this.state = {\n//             currentStatus: SWF_MODAL.MODAL_SIZE.DEFAULT,\n//             modalOpened: false,\n//             mobileFooterOpened: false\n//         }\n//     }\n//\n//     expand() {\n//         const isFullSize = this.state.currentStatus === SWF_MODAL.MODAL_SIZE.FULL;\n//\n//         const modalNode = this.modalRef.current\n//             .querySelector(\".modal-dialog\");\n//\n//         if (isFullSize) {\n//             modalNode.removeAttribute(\"style\");\n//             this.setState({currentStatus: SWF_MODAL.MODAL_SIZE.DEFAULT});\n//             return;\n//         }\n//\n//         modalNode.setAttribute(\"style\", \"width: 100%; height: 98%;\");\n//         this.setState({currentStatus: SWF_MODAL.MODAL_SIZE.FULL});\n//     }\n//\n//     renderPopover() {\n//         const {showPopover, popoverContent: {tagline, content, actions}} = this.props;\n//\n//         if (showPopover) {\n//             return (\n//                 <now-popover\n//                     positions={[\n//                         {\n//                             \"target\": \"bottom-end\",\n//                             \"content\": \"top-end\"\n//                         }\n//                     ]}\n//                 >\n//                     <Button icon=\"x\"\n//                             variant=\"tertiary\"\n//                             bare={true}\n//                             size=\"md\"\n//                             slot=\"trigger\"\n//                             configAria={{\"button\": {\"aria-label\": \"Close\"}}}\n//                             tooltipContent=\"Close\"\n//                     />\n//                     <now-template-card-omnichannel\n//                         slot=\"content\"\n//                         tagline={tagline}\n//                         content={content}\n//                         actions={actions}\n//                     />\n//                 </now-popover>\n//             )\n//         }\n//\n//         return (\n//             <Button icon=\"x\"\n//                     variant=\"tertiary\"\n//                     bare={true}\n//                     size=\"md\"\n//                     slot=\"trigger\"\n//                     configAria={{\"button\": {\"aria-label\": \"Close\"}}}\n//                     tooltipContent=\"Close\"\n//                     onClick={() => void 0}\n//             />\n//         )\n//     }\n//\n//     desktopButtons() {\n//         const isFullSize = this.state.currentStatus === SWF_MODAL.MODAL_SIZE.FULL;\n//\n//         return (\n//             <>\n//                 <Button icon=\"arrows-angle-expand\"\n//                         variant=\"tertiary\"\n//                         bare={true}\n//                         size=\"md\"\n//                         configAria={{\"button\": {\"aria-label\": \"Collapse\"}}}\n//                         tooltipContent=\"Collapse\"\n//                         onClick={() => this.setState({modalOpened: true})}\n//                 />\n//                 <Button icon={isFullSize ? \"collapse-fill\" : \"arrows-angle-expand\"}\n//                         variant=\"tertiary\"\n//                         bare={true}\n//                         size=\"md\"\n//                         configAria={{\"button\": {\"aria-label\": \"Expand\"}}}\n//                         tooltipContent={isFullSize ? \"Collapse\" : \"Expand\"}\n//                         onClick={() => this.setState({currentStatus: SWF_MODAL.MODAL_SIZE.FULL})}\n//                 />\n//                 {this.renderPopover()}\n//             </>\n//         )\n//     }\n//\n//     mobileButtons() {\n//         return (\n//             <>\n//                 <Button\n//                     icon=\"arrow-left-fill\"\n//                     variant=\"tertiary\"\n//                     bare={true}\n//                     size=\"lg\"\n//                     configAria={{\"button\": {\"aria-label\": \"Back\"}}}\n//                     tooltipContent=\"Back\"\n//                     onClick={() => this.setState({modalOpened: false})}\n//                 />\n//             </>\n//         )\n//     }\n//\n//     render() {\n//         const {display, headerElements} = this.props;\n//         const {mobileFooterOpened} = this.state;\n//\n//         const isMobile = SWF_MODAL.MOBILE_REGEXP.test(navigator.userAgent);\n//\n//         return (<>\n//                 <style type=\"text/css\">{styles}</style>\n//                 <div className=\"modal-overlay\"\n//                      ref={elm => this.modalRef.current = elm}\n//                 >\n//                     <div className=\"modal\">\n//                         <div className={classnames({\n//                             \"modal-dialog\": true,\n//                             [`--${display}`]: true,\n//                             [`--full`]: isMobile\n//                         })}>\n//                             <div className={classnames({\n//                                 \"modal-header\": true,\n//                                 \"--mobile\": isMobile,\n//                                 \"--desktop-content\": !isMobile && headerElements === 2,\n//                                 \"--desktop\": !isMobile && headerElements === 3\n//                             })}>\n//                                 <div className=\"main-buttons\">\n//                                     {isMobile ? this.mobileButtons() : this.desktopButtons()}\n//                                 </div>\n//                                 <div className=\"header-content\">\n//                                     <slot name=\"header\"/>\n//                                 </div>\n//                                 {\n//                                     headerElements === 3 ? <div className=\"additional-buttons\">\n//                                         {isMobile ?\n//                                             <now-button-iconic\n//                                                 icon=\"ellipsis-h-fill\"\n//                                                 variant=\"primary\"\n//                                                 bare={true}\n//                                                 size=\"md\"\n//                                                 configAria={{\"button\": {\"aria-label\": \"Show Actions\"}}}\n//                                                 tooltipContent=\"Show Actions\"\n//                                                 onClick={() => this.setState({mobileFooterOpened: true})}\n//                                             />\n//                                             :\n//                                             <slot name=\"header-buttons\"/>}\n//                                     </div> : \"\"\n//                                 }\n//\n//                             </div>\n//                             <div\n//                                 className=\"modal-body\"\n//                             >\n//                                 <slot name=\"body\"/>\n//                             </div>\n//                             {isMobile\n//                                 ?\n//                                 <div\n//                                     className={classnames({\n//                                         \"menu-background\": true,\n//                                         \"--active\": mobileFooterOpened\n//                                     })}\n//                                 />\n//                                 :\n//                                 \"\"}\n//                             <div className={classnames({\n//                                 \"modal-footer\": true,\n//                                 \"--mobile\": isMobile,\n//                                 \"--active\": mobileFooterOpened\n//                             })}>\n//                                 {isMobile ?\n//                                     <div className=\"footer-content\">\n//                                         <slot name=\"footer\"/>\n//                                         <slot name=\"header-buttons\"/>\n//                                     </div>\n//                                     :\n//                                     <slot name=\"footer\"/>\n//                                 }\n//                             </div>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </>\n//         )\n//     }\n// }\n\nModal.defaultProps = {\n    openModal: false,\n    showPopover: false,\n    popoverContent: {},\n    display: \"grid\",\n    headerElements: 2\n}\n\nModal.propTypes = {\n    openModal: PropTypes.bool,\n    showPopover: PropTypes.bool,\n    popoverContent: PropTypes.shape({\n        tagline: PropTypes.object,\n        content: PropTypes.object,\n        actions: PropTypes.object\n    }),\n    display: PropTypes.oneOf([\n        'block',\n        'inline',\n        'inline-block',\n        'grid',\n        'flex',\n        'inline-grid',\n        'inline-flex',\n        'none'\n    ]),\n    headerElements: PropTypes.number\n}\n\nexport default Modal"],"file":"Modal.js"}