"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPointInsideTheElement = exports.addCharToDate = void 0;

var _moment = _interopRequireDefault(require("moment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var isLetter = function isLetter(_char) {
  return _char.match(/[a-zA-Z]/i);
};

var isNumber = function isNumber(_char2) {
  return _char2 >= '0' && _char2 <= '9';
};

var isExpectedTypeOfChar = function isExpectedTypeOfChar(_char3, expectedChar) {
  // console.log("compare", char, expectedChar)
  switch (true) {
    case isLetter(expectedChar):
      return isLetter(_char3);

    case isNumber(expectedChar):
      return isNumber(_char3);

    default:
      return _char3 === expectedChar;
  }
};

var isZeroAvailable = function isZeroAvailable(format, position) {
  return position === 0 || !isLetter(format.charAt(position - 1));
};

var nextChar = function nextChar(format, position) {
  var result = '';
  var nextPosition = position + 1;
  if (format.length > nextPosition && !isLetter(format.charAt(nextPosition))) result += format.charAt(nextPosition);
  return result;
};

var addCharToDate = function addCharToDate(format, curStr, _char4) {
  var dateStr = (0, _moment["default"])().format(format);
  if (!curStr) curStr = '';
  var possibleResult = curStr + _char4;
  var result = "";
  var isValidDate = false;

  if (_char4 == null) {
    result = curStr.length > 0 ? curStr.slice(0, -1) : '';
  } else {
    isValidDate = (0, _moment["default"])(possibleResult, format, false).isValid();
    var expectedChar = dateStr.charAt(curStr.length);
    var isZero = _char4 === '0' && isZeroAvailable(format, curStr.length);
    var isNeededChar = isZero || isValidDate && isExpectedTypeOfChar(_char4.charAt(0), expectedChar);
    result = isNeededChar ? curStr + _char4.charAt(0) + nextChar(format, curStr.length) : curStr;
  }

  return result;
};

exports.addCharToDate = addCharToDate;

var isPointInsideTheElement = function isPointInsideTheElement(element, pointX, pointY) {
  var elementDimensions = element.getBoundingClientRect();
  var elementPoints = {
    startY: elementDimensions.y,
    startX: elementDimensions.x,
    endY: elementDimensions.y + elementDimensions.height,
    endX: elementDimensions.x + elementDimensions.width
  };
  var insideX = pointX < elementPoints.endX && pointX > elementPoints.startX;
  var insideY = pointY < elementPoints.endY && pointY > elementPoints.startY;
  return insideY && insideX;
};

exports.isPointInsideTheElement = isPointInsideTheElement;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlUGlja2VyL3V0aWxzLmpzIl0sIm5hbWVzIjpbImlzTGV0dGVyIiwiY2hhciIsIm1hdGNoIiwiaXNOdW1iZXIiLCJpc0V4cGVjdGVkVHlwZU9mQ2hhciIsImV4cGVjdGVkQ2hhciIsImlzWmVyb0F2YWlsYWJsZSIsImZvcm1hdCIsInBvc2l0aW9uIiwiY2hhckF0IiwibmV4dENoYXIiLCJyZXN1bHQiLCJuZXh0UG9zaXRpb24iLCJsZW5ndGgiLCJhZGRDaGFyVG9EYXRlIiwiY3VyU3RyIiwiZGF0ZVN0ciIsInBvc3NpYmxlUmVzdWx0IiwiaXNWYWxpZERhdGUiLCJzbGljZSIsImlzVmFsaWQiLCJpc1plcm8iLCJpc05lZWRlZENoYXIiLCJpc1BvaW50SW5zaWRlVGhlRWxlbWVudCIsImVsZW1lbnQiLCJwb2ludFgiLCJwb2ludFkiLCJlbGVtZW50RGltZW5zaW9ucyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImVsZW1lbnRQb2ludHMiLCJzdGFydFkiLCJ5Iiwic3RhcnRYIiwieCIsImVuZFkiLCJoZWlnaHQiLCJlbmRYIiwid2lkdGgiLCJpbnNpZGVYIiwiaW5zaWRlWSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBRUEsSUFBTUEsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQ0MsS0FBRCxFQUFVO0FBQ3ZCLFNBQU9BLEtBQUksQ0FBQ0MsS0FBTCxDQUFXLFdBQVgsQ0FBUDtBQUNILENBRkQ7O0FBSUEsSUFBTUMsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQ0YsTUFBRCxFQUFVO0FBQ3ZCLFNBQVFBLE1BQUksSUFBSSxHQUFSLElBQWVBLE1BQUksSUFBSSxHQUEvQjtBQUNILENBRkQ7O0FBSUEsSUFBTUcsb0JBQW9CLEdBQUcsU0FBdkJBLG9CQUF1QixDQUFDSCxNQUFELEVBQU9JLFlBQVAsRUFBd0I7QUFDbEQ7QUFDQyxVQUFRLElBQVI7QUFDSSxTQUFLTCxRQUFRLENBQUNLLFlBQUQsQ0FBYjtBQUNJLGFBQVFMLFFBQVEsQ0FBQ0MsTUFBRCxDQUFoQjs7QUFDSixTQUFLRSxRQUFRLENBQUNFLFlBQUQsQ0FBYjtBQUNJLGFBQU9GLFFBQVEsQ0FBQ0YsTUFBRCxDQUFmOztBQUNKO0FBQ0ksYUFBT0EsTUFBSSxLQUFLSSxZQUFoQjtBQU5SO0FBU0gsQ0FYRDs7QUFhQSxJQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUNDLE1BQUQsRUFBU0MsUUFBVCxFQUFzQjtBQUMxQyxTQUFPQSxRQUFRLEtBQUssQ0FBYixJQUFrQixDQUFDUixRQUFRLENBQUNPLE1BQU0sQ0FBQ0UsTUFBUCxDQUFjRCxRQUFRLEdBQUMsQ0FBdkIsQ0FBRCxDQUFsQztBQUNILENBRkQ7O0FBSUEsSUFBTUUsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQ0gsTUFBRCxFQUFTQyxRQUFULEVBQXNCO0FBQ25DLE1BQUlHLE1BQU0sR0FBRyxFQUFiO0FBQ0EsTUFBSUMsWUFBWSxHQUFHSixRQUFRLEdBQUcsQ0FBOUI7QUFDQSxNQUFHRCxNQUFNLENBQUNNLE1BQVAsR0FBZ0JELFlBQWhCLElBQ0ksQ0FBQ1osUUFBUSxDQUFDTyxNQUFNLENBQUNFLE1BQVAsQ0FBY0csWUFBZCxDQUFELENBRGhCLEVBRUlELE1BQU0sSUFBRUosTUFBTSxDQUFDRSxNQUFQLENBQWNHLFlBQWQsQ0FBUjtBQUVKLFNBQU9ELE1BQVA7QUFDSCxDQVJEOztBQVVPLElBQU1HLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQ1AsTUFBRCxFQUFTUSxNQUFULEVBQWlCZCxNQUFqQixFQUEwQjtBQUNuRCxNQUFJZSxPQUFPLEdBQUcsMEJBQVNULE1BQVQsQ0FBZ0JBLE1BQWhCLENBQWQ7QUFDQSxNQUFHLENBQUNRLE1BQUosRUFDSUEsTUFBTSxHQUFHLEVBQVQ7QUFFSixNQUFJRSxjQUFjLEdBQUdGLE1BQU0sR0FBR2QsTUFBOUI7QUFFQSxNQUFJVSxNQUFNLEdBQUcsRUFBYjtBQUNBLE1BQUlPLFdBQVcsR0FBRyxLQUFsQjs7QUFDQSxNQUFHakIsTUFBSSxJQUFFLElBQVQsRUFBYztBQUNWVSxJQUFBQSxNQUFNLEdBQUlJLE1BQU0sQ0FBQ0YsTUFBUCxHQUFjLENBQWYsR0FBb0JFLE1BQU0sQ0FBQ0ksS0FBUCxDQUFhLENBQWIsRUFBZ0IsQ0FBQyxDQUFqQixDQUFwQixHQUEwQyxFQUFuRDtBQUNILEdBRkQsTUFFTztBQUNIRCxJQUFBQSxXQUFXLEdBQUcsd0JBQU9ELGNBQVAsRUFBdUJWLE1BQXZCLEVBQStCLEtBQS9CLEVBQXNDYSxPQUF0QyxFQUFkO0FBRUEsUUFBSWYsWUFBWSxHQUFHVyxPQUFPLENBQUNQLE1BQVIsQ0FBZU0sTUFBTSxDQUFDRixNQUF0QixDQUFuQjtBQUNBLFFBQUlRLE1BQU0sR0FBR3BCLE1BQUksS0FBRyxHQUFQLElBQWNLLGVBQWUsQ0FBQ0MsTUFBRCxFQUFTUSxNQUFNLENBQUNGLE1BQWhCLENBQTFDO0FBRUEsUUFBSVMsWUFBWSxHQUFHRCxNQUFNLElBQUtILFdBQVcsSUFBSWQsb0JBQW9CLENBQUNILE1BQUksQ0FBQ1EsTUFBTCxDQUFZLENBQVosQ0FBRCxFQUFpQkosWUFBakIsQ0FBakU7QUFFQU0sSUFBQUEsTUFBTSxHQUFJVyxZQUFELEdBQ0hQLE1BQU0sR0FBR2QsTUFBSSxDQUFDUSxNQUFMLENBQVksQ0FBWixDQUFULEdBQTBCQyxRQUFRLENBQUNILE1BQUQsRUFBU1EsTUFBTSxDQUFDRixNQUFoQixDQUQvQixHQUVIRSxNQUZOO0FBR0g7O0FBRUQsU0FBT0osTUFBUDtBQUNILENBekJNOzs7O0FBNEJBLElBQU1ZLHVCQUF1QixHQUFHLFNBQTFCQSx1QkFBMEIsQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQWtCQyxNQUFsQixFQUE2QjtBQUNoRSxNQUFJQyxpQkFBaUIsR0FBR0gsT0FBTyxDQUFDSSxxQkFBUixFQUF4QjtBQUVBLE1BQUlDLGFBQWEsR0FBRztBQUNoQkMsSUFBQUEsTUFBTSxFQUFFSCxpQkFBaUIsQ0FBQ0ksQ0FEVjtBQUVoQkMsSUFBQUEsTUFBTSxFQUFFTCxpQkFBaUIsQ0FBQ00sQ0FGVjtBQUdoQkMsSUFBQUEsSUFBSSxFQUFFUCxpQkFBaUIsQ0FBQ0ksQ0FBbEIsR0FBc0JKLGlCQUFpQixDQUFDUSxNQUg5QjtBQUloQkMsSUFBQUEsSUFBSSxFQUFFVCxpQkFBaUIsQ0FBQ00sQ0FBbEIsR0FBc0JOLGlCQUFpQixDQUFDVTtBQUo5QixHQUFwQjtBQU9BLE1BQUlDLE9BQU8sR0FBR2IsTUFBTSxHQUFDSSxhQUFhLENBQUNPLElBQXJCLElBQTZCWCxNQUFNLEdBQUNJLGFBQWEsQ0FBQ0csTUFBaEU7QUFDQSxNQUFJTyxPQUFPLEdBQUdiLE1BQU0sR0FBQ0csYUFBYSxDQUFDSyxJQUFyQixJQUE2QlIsTUFBTSxHQUFDRyxhQUFhLENBQUNDLE1BQWhFO0FBRUEsU0FBT1MsT0FBTyxJQUFJRCxPQUFsQjtBQUNILENBZE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9tZW50IGZyb20gXCJtb21lbnRcIjtcclxuXHJcbmNvbnN0IGlzTGV0dGVyID0gKGNoYXIpID0+IHtcclxuICAgIHJldHVybiBjaGFyLm1hdGNoKC9bYS16QS1aXS9pKTtcclxufVxyXG5cclxuY29uc3QgaXNOdW1iZXIgPSAoY2hhcikgPT4ge1xyXG4gICAgcmV0dXJuICBjaGFyID49ICcwJyAmJiBjaGFyIDw9ICc5JztcclxufVxyXG5cclxuY29uc3QgaXNFeHBlY3RlZFR5cGVPZkNoYXIgPSAoY2hhciwgZXhwZWN0ZWRDaGFyKSA9PiB7XHJcbiAgIC8vIGNvbnNvbGUubG9nKFwiY29tcGFyZVwiLCBjaGFyLCBleHBlY3RlZENoYXIpXHJcbiAgICBzd2l0Y2ggKHRydWUpe1xyXG4gICAgICAgIGNhc2UgaXNMZXR0ZXIoZXhwZWN0ZWRDaGFyKSA6XHJcbiAgICAgICAgICAgIHJldHVybiAgaXNMZXR0ZXIoY2hhcik7XHJcbiAgICAgICAgY2FzZSBpc051bWJlcihleHBlY3RlZENoYXIpIDpcclxuICAgICAgICAgICAgcmV0dXJuIGlzTnVtYmVyKGNoYXIpO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBjaGFyID09PSBleHBlY3RlZENoYXI7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5jb25zdCBpc1plcm9BdmFpbGFibGUgPSAoZm9ybWF0LCBwb3NpdGlvbikgPT4ge1xyXG4gICAgcmV0dXJuIHBvc2l0aW9uID09PSAwIHx8ICFpc0xldHRlcihmb3JtYXQuY2hhckF0KHBvc2l0aW9uLTEpKTtcclxufVxyXG5cclxuY29uc3QgbmV4dENoYXIgPSAoZm9ybWF0LCBwb3NpdGlvbikgPT4ge1xyXG4gICAgbGV0IHJlc3VsdCA9ICcnO1xyXG4gICAgbGV0IG5leHRQb3NpdGlvbiA9IHBvc2l0aW9uICsgMTtcclxuICAgIGlmKGZvcm1hdC5sZW5ndGggPiBuZXh0UG9zaXRpb25cclxuICAgICAgICAmJiAhaXNMZXR0ZXIoZm9ybWF0LmNoYXJBdChuZXh0UG9zaXRpb24pKSlcclxuICAgICAgICByZXN1bHQrPWZvcm1hdC5jaGFyQXQobmV4dFBvc2l0aW9uKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgYWRkQ2hhclRvRGF0ZSA9IChmb3JtYXQsIGN1clN0ciwgY2hhcikgPT4ge1xyXG4gICAgbGV0IGRhdGVTdHIgPSBtb21lbnQoKS5mb3JtYXQoZm9ybWF0KTtcclxuICAgIGlmKCFjdXJTdHIpXHJcbiAgICAgICAgY3VyU3RyID0gJydcclxuXHJcbiAgICBsZXQgcG9zc2libGVSZXN1bHQgPSBjdXJTdHIgKyBjaGFyIDtcclxuXHJcbiAgICBsZXQgcmVzdWx0ID0gXCJcIjtcclxuICAgIGxldCBpc1ZhbGlkRGF0ZSA9IGZhbHNlO1xyXG4gICAgaWYoY2hhcj09bnVsbCl7XHJcbiAgICAgICAgcmVzdWx0ID0gKGN1clN0ci5sZW5ndGg+MCkgPyBjdXJTdHIuc2xpY2UoMCwgLTEpIDogJyc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlzVmFsaWREYXRlID0gbW9tZW50KHBvc3NpYmxlUmVzdWx0LCBmb3JtYXQsIGZhbHNlKS5pc1ZhbGlkKCk7XHJcblxyXG4gICAgICAgIGxldCBleHBlY3RlZENoYXIgPSBkYXRlU3RyLmNoYXJBdChjdXJTdHIubGVuZ3RoKTtcclxuICAgICAgICBsZXQgaXNaZXJvID0gY2hhcj09PScwJyAmJiBpc1plcm9BdmFpbGFibGUoZm9ybWF0LCBjdXJTdHIubGVuZ3RoKTtcclxuXHJcbiAgICAgICAgbGV0IGlzTmVlZGVkQ2hhciA9IGlzWmVybyB8fCAoaXNWYWxpZERhdGUgJiYgaXNFeHBlY3RlZFR5cGVPZkNoYXIoY2hhci5jaGFyQXQoMCksIGV4cGVjdGVkQ2hhcikpO1xyXG5cclxuICAgICAgICByZXN1bHQgPSAoaXNOZWVkZWRDaGFyKVxyXG4gICAgICAgICAgICA/IGN1clN0ciArIGNoYXIuY2hhckF0KDApICsgbmV4dENoYXIoZm9ybWF0LCBjdXJTdHIubGVuZ3RoKVxyXG4gICAgICAgICAgICA6IGN1clN0cjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGlzUG9pbnRJbnNpZGVUaGVFbGVtZW50ID0gKGVsZW1lbnQsIHBvaW50WCwgcG9pbnRZKSA9PiB7XHJcbiAgICBsZXQgZWxlbWVudERpbWVuc2lvbnMgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgIGxldCBlbGVtZW50UG9pbnRzID0ge1xyXG4gICAgICAgIHN0YXJ0WTogZWxlbWVudERpbWVuc2lvbnMueSxcclxuICAgICAgICBzdGFydFg6IGVsZW1lbnREaW1lbnNpb25zLngsXHJcbiAgICAgICAgZW5kWTogZWxlbWVudERpbWVuc2lvbnMueSArIGVsZW1lbnREaW1lbnNpb25zLmhlaWdodCxcclxuICAgICAgICBlbmRYOiBlbGVtZW50RGltZW5zaW9ucy54ICsgZWxlbWVudERpbWVuc2lvbnMud2lkdGhcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaW5zaWRlWCA9IHBvaW50WDxlbGVtZW50UG9pbnRzLmVuZFggJiYgcG9pbnRYPmVsZW1lbnRQb2ludHMuc3RhcnRYO1xyXG4gICAgbGV0IGluc2lkZVkgPSBwb2ludFk8ZWxlbWVudFBvaW50cy5lbmRZICYmIHBvaW50WT5lbGVtZW50UG9pbnRzLnN0YXJ0WTtcclxuXHJcbiAgICByZXR1cm4gaW5zaWRlWSAmJiBpbnNpZGVYXHJcbn0iXX0=