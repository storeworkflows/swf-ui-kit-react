"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addCharToDate = void 0;

var _moment = _interopRequireDefault(require("moment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var isLetter = function isLetter(_char) {
  return _char.match(/[a-zA-Z]/i);
};

var isNumber = function isNumber(_char2) {
  return _char2 >= '0' && _char2 <= '9';
};

var isExpectedTypeOfChar = function isExpectedTypeOfChar(_char3, expectedChar) {
  // console.log("compare", char, expectedChar)
  switch (true) {
    case isLetter(expectedChar):
      return isLetter(_char3);

    case isNumber(expectedChar):
      return isNumber(_char3);

    default:
      return _char3 === expectedChar;
  }
};

var isZeroAvailable = function isZeroAvailable(format, position) {
  return position === 0 || !isLetter(format.charAt(position - 1));
};

var nextChar = function nextChar(format, position) {
  var result = '';
  var nextPosition = position + 1;
  if (format.length > nextPosition && !isLetter(format.charAt(nextPosition))) result += format.charAt(nextPosition);
  return result;
};

var addCharToDate = function addCharToDate(format, curStr, _char4) {
  var dateStr = (0, _moment["default"])().format(format);
  if (!curStr) curStr = '';
  var possibleResult = curStr + _char4;
  var result = "";
  var isValidDate = false;

  if (_char4 == null) {
    result = curStr.length > 0 ? curStr.slice(0, -1) : '';
  } else {
    isValidDate = (0, _moment["default"])(possibleResult, format, false).isValid();
    var expectedChar = dateStr.charAt(curStr.length);
    var isZero = _char4 === '0' && isZeroAvailable(format, curStr.length);
    var isNeededChar = isZero || isValidDate && isExpectedTypeOfChar(_char4.charAt(0), expectedChar);
    result = isNeededChar ? curStr + _char4.charAt(0) + nextChar(format, curStr.length) : curStr;
  }

  return result;
};

exports.addCharToDate = addCharToDate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlUGlja2VyL3V0aWxzLmpzIl0sIm5hbWVzIjpbImlzTGV0dGVyIiwiY2hhciIsIm1hdGNoIiwiaXNOdW1iZXIiLCJpc0V4cGVjdGVkVHlwZU9mQ2hhciIsImV4cGVjdGVkQ2hhciIsImlzWmVyb0F2YWlsYWJsZSIsImZvcm1hdCIsInBvc2l0aW9uIiwiY2hhckF0IiwibmV4dENoYXIiLCJyZXN1bHQiLCJuZXh0UG9zaXRpb24iLCJsZW5ndGgiLCJhZGRDaGFyVG9EYXRlIiwiY3VyU3RyIiwiZGF0ZVN0ciIsInBvc3NpYmxlUmVzdWx0IiwiaXNWYWxpZERhdGUiLCJzbGljZSIsImlzVmFsaWQiLCJpc1plcm8iLCJpc05lZWRlZENoYXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVBLElBQU1BLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUNDLEtBQUQsRUFBVTtBQUN2QixTQUFPQSxLQUFJLENBQUNDLEtBQUwsQ0FBVyxXQUFYLENBQVA7QUFDSCxDQUZEOztBQUlBLElBQU1DLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUNGLE1BQUQsRUFBVTtBQUN2QixTQUFRQSxNQUFJLElBQUksR0FBUixJQUFlQSxNQUFJLElBQUksR0FBL0I7QUFDSCxDQUZEOztBQUlBLElBQU1HLG9CQUFvQixHQUFHLFNBQXZCQSxvQkFBdUIsQ0FBQ0gsTUFBRCxFQUFPSSxZQUFQLEVBQXdCO0FBQ2xEO0FBQ0MsVUFBUSxJQUFSO0FBQ0ksU0FBS0wsUUFBUSxDQUFDSyxZQUFELENBQWI7QUFDSSxhQUFRTCxRQUFRLENBQUNDLE1BQUQsQ0FBaEI7O0FBQ0osU0FBS0UsUUFBUSxDQUFDRSxZQUFELENBQWI7QUFDSSxhQUFPRixRQUFRLENBQUNGLE1BQUQsQ0FBZjs7QUFDSjtBQUNJLGFBQU9BLE1BQUksS0FBS0ksWUFBaEI7QUFOUjtBQVNILENBWEQ7O0FBYUEsSUFBTUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFDQyxNQUFELEVBQVNDLFFBQVQsRUFBc0I7QUFDMUMsU0FBT0EsUUFBUSxLQUFLLENBQWIsSUFBa0IsQ0FBQ1IsUUFBUSxDQUFDTyxNQUFNLENBQUNFLE1BQVAsQ0FBY0QsUUFBUSxHQUFDLENBQXZCLENBQUQsQ0FBbEM7QUFDSCxDQUZEOztBQUlBLElBQU1FLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUNILE1BQUQsRUFBU0MsUUFBVCxFQUFzQjtBQUNuQyxNQUFJRyxNQUFNLEdBQUcsRUFBYjtBQUNBLE1BQUlDLFlBQVksR0FBR0osUUFBUSxHQUFHLENBQTlCO0FBQ0EsTUFBR0QsTUFBTSxDQUFDTSxNQUFQLEdBQWdCRCxZQUFoQixJQUNJLENBQUNaLFFBQVEsQ0FBQ08sTUFBTSxDQUFDRSxNQUFQLENBQWNHLFlBQWQsQ0FBRCxDQURoQixFQUVJRCxNQUFNLElBQUVKLE1BQU0sQ0FBQ0UsTUFBUCxDQUFjRyxZQUFkLENBQVI7QUFFSixTQUFPRCxNQUFQO0FBQ0gsQ0FSRDs7QUFVTyxJQUFNRyxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQUNQLE1BQUQsRUFBU1EsTUFBVCxFQUFpQmQsTUFBakIsRUFBMEI7QUFDbkQsTUFBSWUsT0FBTyxHQUFHLDBCQUFTVCxNQUFULENBQWdCQSxNQUFoQixDQUFkO0FBQ0EsTUFBRyxDQUFDUSxNQUFKLEVBQ0lBLE1BQU0sR0FBRyxFQUFUO0FBRUosTUFBSUUsY0FBYyxHQUFHRixNQUFNLEdBQUdkLE1BQTlCO0FBRUEsTUFBSVUsTUFBTSxHQUFHLEVBQWI7QUFDQSxNQUFJTyxXQUFXLEdBQUcsS0FBbEI7O0FBQ0EsTUFBR2pCLE1BQUksSUFBRSxJQUFULEVBQWM7QUFDVlUsSUFBQUEsTUFBTSxHQUFJSSxNQUFNLENBQUNGLE1BQVAsR0FBYyxDQUFmLEdBQW9CRSxNQUFNLENBQUNJLEtBQVAsQ0FBYSxDQUFiLEVBQWdCLENBQUMsQ0FBakIsQ0FBcEIsR0FBMEMsRUFBbkQ7QUFDSCxHQUZELE1BRU87QUFDSEQsSUFBQUEsV0FBVyxHQUFHLHdCQUFPRCxjQUFQLEVBQXVCVixNQUF2QixFQUErQixLQUEvQixFQUFzQ2EsT0FBdEMsRUFBZDtBQUVBLFFBQUlmLFlBQVksR0FBR1csT0FBTyxDQUFDUCxNQUFSLENBQWVNLE1BQU0sQ0FBQ0YsTUFBdEIsQ0FBbkI7QUFDQSxRQUFJUSxNQUFNLEdBQUdwQixNQUFJLEtBQUcsR0FBUCxJQUFjSyxlQUFlLENBQUNDLE1BQUQsRUFBU1EsTUFBTSxDQUFDRixNQUFoQixDQUExQztBQUVBLFFBQUlTLFlBQVksR0FBR0QsTUFBTSxJQUFLSCxXQUFXLElBQUlkLG9CQUFvQixDQUFDSCxNQUFJLENBQUNRLE1BQUwsQ0FBWSxDQUFaLENBQUQsRUFBaUJKLFlBQWpCLENBQWpFO0FBRUFNLElBQUFBLE1BQU0sR0FBSVcsWUFBRCxHQUNIUCxNQUFNLEdBQUdkLE1BQUksQ0FBQ1EsTUFBTCxDQUFZLENBQVosQ0FBVCxHQUEwQkMsUUFBUSxDQUFDSCxNQUFELEVBQVNRLE1BQU0sQ0FBQ0YsTUFBaEIsQ0FEL0IsR0FFSEUsTUFGTjtBQUdIOztBQUVELFNBQU9KLE1BQVA7QUFDSCxDQXpCTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb21lbnQgZnJvbSBcIm1vbWVudFwiO1xyXG5cclxuY29uc3QgaXNMZXR0ZXIgPSAoY2hhcikgPT4ge1xyXG4gICAgcmV0dXJuIGNoYXIubWF0Y2goL1thLXpBLVpdL2kpO1xyXG59XHJcblxyXG5jb25zdCBpc051bWJlciA9IChjaGFyKSA9PiB7XHJcbiAgICByZXR1cm4gIGNoYXIgPj0gJzAnICYmIGNoYXIgPD0gJzknO1xyXG59XHJcblxyXG5jb25zdCBpc0V4cGVjdGVkVHlwZU9mQ2hhciA9IChjaGFyLCBleHBlY3RlZENoYXIpID0+IHtcclxuICAgLy8gY29uc29sZS5sb2coXCJjb21wYXJlXCIsIGNoYXIsIGV4cGVjdGVkQ2hhcilcclxuICAgIHN3aXRjaCAodHJ1ZSl7XHJcbiAgICAgICAgY2FzZSBpc0xldHRlcihleHBlY3RlZENoYXIpIDpcclxuICAgICAgICAgICAgcmV0dXJuICBpc0xldHRlcihjaGFyKTtcclxuICAgICAgICBjYXNlIGlzTnVtYmVyKGV4cGVjdGVkQ2hhcikgOlxyXG4gICAgICAgICAgICByZXR1cm4gaXNOdW1iZXIoY2hhcik7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIGNoYXIgPT09IGV4cGVjdGVkQ2hhcjtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmNvbnN0IGlzWmVyb0F2YWlsYWJsZSA9IChmb3JtYXQsIHBvc2l0aW9uKSA9PiB7XHJcbiAgICByZXR1cm4gcG9zaXRpb24gPT09IDAgfHwgIWlzTGV0dGVyKGZvcm1hdC5jaGFyQXQocG9zaXRpb24tMSkpO1xyXG59XHJcblxyXG5jb25zdCBuZXh0Q2hhciA9IChmb3JtYXQsIHBvc2l0aW9uKSA9PiB7XHJcbiAgICBsZXQgcmVzdWx0ID0gJyc7XHJcbiAgICBsZXQgbmV4dFBvc2l0aW9uID0gcG9zaXRpb24gKyAxO1xyXG4gICAgaWYoZm9ybWF0Lmxlbmd0aCA+IG5leHRQb3NpdGlvblxyXG4gICAgICAgICYmICFpc0xldHRlcihmb3JtYXQuY2hhckF0KG5leHRQb3NpdGlvbikpKVxyXG4gICAgICAgIHJlc3VsdCs9Zm9ybWF0LmNoYXJBdChuZXh0UG9zaXRpb24pO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBhZGRDaGFyVG9EYXRlID0gKGZvcm1hdCwgY3VyU3RyLCBjaGFyKSA9PiB7XHJcbiAgICBsZXQgZGF0ZVN0ciA9IG1vbWVudCgpLmZvcm1hdChmb3JtYXQpO1xyXG4gICAgaWYoIWN1clN0cilcclxuICAgICAgICBjdXJTdHIgPSAnJ1xyXG5cclxuICAgIGxldCBwb3NzaWJsZVJlc3VsdCA9IGN1clN0ciArIGNoYXIgO1xyXG5cclxuICAgIGxldCByZXN1bHQgPSBcIlwiO1xyXG4gICAgbGV0IGlzVmFsaWREYXRlID0gZmFsc2U7XHJcbiAgICBpZihjaGFyPT1udWxsKXtcclxuICAgICAgICByZXN1bHQgPSAoY3VyU3RyLmxlbmd0aD4wKSA/IGN1clN0ci5zbGljZSgwLCAtMSkgOiAnJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaXNWYWxpZERhdGUgPSBtb21lbnQocG9zc2libGVSZXN1bHQsIGZvcm1hdCwgZmFsc2UpLmlzVmFsaWQoKTtcclxuXHJcbiAgICAgICAgbGV0IGV4cGVjdGVkQ2hhciA9IGRhdGVTdHIuY2hhckF0KGN1clN0ci5sZW5ndGgpO1xyXG4gICAgICAgIGxldCBpc1plcm8gPSBjaGFyPT09JzAnICYmIGlzWmVyb0F2YWlsYWJsZShmb3JtYXQsIGN1clN0ci5sZW5ndGgpO1xyXG5cclxuICAgICAgICBsZXQgaXNOZWVkZWRDaGFyID0gaXNaZXJvIHx8IChpc1ZhbGlkRGF0ZSAmJiBpc0V4cGVjdGVkVHlwZU9mQ2hhcihjaGFyLmNoYXJBdCgwKSwgZXhwZWN0ZWRDaGFyKSk7XHJcblxyXG4gICAgICAgIHJlc3VsdCA9IChpc05lZWRlZENoYXIpXHJcbiAgICAgICAgICAgID8gY3VyU3RyICsgY2hhci5jaGFyQXQoMCkgKyBuZXh0Q2hhcihmb3JtYXQsIGN1clN0ci5sZW5ndGgpXHJcbiAgICAgICAgICAgIDogY3VyU3RyO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn0iXX0=