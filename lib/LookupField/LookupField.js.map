{"version":3,"sources":["../../src/LookupField/LookupField.js"],"names":["LookupField","props","onChange","bind","getReferenceList","_","debounce","listHandleClick","referenceHandleClick","renderListPills","onClick","onBlur","onFocus","controllerRef","React","createRef","inputRef","isList","type","state","records","referenceRecord","sysId","value","displayValue","listRecords","split","searchValue","matchesCount","loading","loaded","focused","setState","operationName","query","variables","chars","encodedRecord","field","name","ignoreRefQual","paginationLimit","serializedChanges","sortBy","sys_id","tableRecordSysId","table","params","signal","current","response","json","get","referenceDataList","referenceRecentDataList","totalCount","console","error","event","target","abort","AbortController","record","referenceData","onValueChange","Array","from","Set","toString","log","isReference","map","label","declarativeUiActions","hasMatches","showResults","styles","top","offsetHeight","Component","defaultProps","propTypes","func","string","object","oneOfType"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport graphqlRequest from \"../utils/graphqlRequest/graphqlRequest\";\r\nimport {query} from \"./datasource\";\r\nimport _ from \"lodash\";\r\nimport {Input} from \"../index\";\r\nimport styles from \"./styles.scss\";\r\nimport DeclarativeUIActions from \"./DeclarativeUIActions\";\r\nimport Result from \"./Result\";\r\nimport Pill from \"../Pill/Pill\";\r\n\r\nclass LookupField extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.getReferenceList = this.getReferenceList.bind(this);\r\n        this.getReferenceList = _.debounce(this.getReferenceList, 500);\r\n        this.listHandleClick = this.listHandleClick.bind(this);\r\n        this.referenceHandleClick = this.referenceHandleClick.bind(this);\r\n        this.renderListPills = this.renderListPills.bind(this);\r\n\r\n        this.onClick = this.onClick.bind(this);\r\n        this.onBlur = this.onBlur.bind(this);\r\n        this.onFocus = this.onFocus.bind(this);\r\n\r\n        this.controllerRef = React.createRef();\r\n        this.inputRef = React.createRef();\r\n\r\n        this.isList = this.props.type === \"list\";\r\n\r\n        this.state = {\r\n            records: [],\r\n            referenceRecord: {\r\n                sysId: this.isList ? \"\" : this.props.value?.value ?? null,\r\n                displayValue: this.isList ? \"\" : this.props.value?.displayValue ?? \"\"\r\n            },\r\n            listRecords: {\r\n                value: this.props.value?.value.split(\",\") ?? [],\r\n                displayValue: this.props.value?.displayValue.split(\",\") ?? []\r\n            },\r\n            searchValue: \"\",\r\n            matchesCount: 0,\r\n            loading: false,\r\n            loaded: false,\r\n            focused: true\r\n        }\r\n    }\r\n\r\n    async getReferenceList(value) {\r\n        try {\r\n            this.setState({\r\n                loading: true,\r\n                records: [],\r\n                loaded: false\r\n            });\r\n\r\n            const response = await graphqlRequest({\r\n                operationName: \"reference\",\r\n                query,\r\n                variables: {\r\n                    chars: value,\r\n                    encodedRecord: \"\",\r\n                    field: this.props.name,\r\n                    ignoreRefQual: false,\r\n                    paginationLimit: 25,\r\n                    serializedChanges: \"\",\r\n                    sortBy: \"\",\r\n                    sys_id: this.props.tableRecordSysId,\r\n                    table: this.props.table\r\n                },\r\n                params: {\r\n                    signal: this.controllerRef.current.signal\r\n                }\r\n            });\r\n            const json = await response.json();\r\n            const {\r\n                referenceDataList,\r\n                referenceRecentDataList,\r\n                totalCount\r\n            } = _.get(json, \"[0].data.GlideLayout_Query.referenceDataRetriever\");\r\n\r\n            this.setState({\r\n                loading: false,\r\n                loaded: true,\r\n                records: [...referenceDataList, ...referenceRecentDataList],\r\n                matchesCount: totalCount\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    onChange(event) {\r\n        const {target: {value}} = event;\r\n        if (this.controllerRef.current) {\r\n            this.controllerRef.current.abort();\r\n        }\r\n        this.setState({\r\n            referenceRecord: {\r\n                sysId: null,\r\n                displayValue: value\r\n            }\r\n        })\r\n\r\n        this.controllerRef.current = new AbortController();\r\n\r\n        this.getReferenceList(value);\r\n    }\r\n\r\n    referenceHandleClick(record) {\r\n        const {sysId, referenceData} = record;\r\n\r\n        this.setState({\r\n            referenceRecord: {\r\n                sysId,\r\n                displayValue: referenceData[0].value\r\n            },\r\n            loaded: false\r\n        })\r\n\r\n        this.props.onValueChange(this.props.name, sysId, referenceData[0].value);\r\n    }\r\n\r\n    listHandleClick(record) {\r\n        const {sysId, referenceData} = record;\r\n\r\n        const listRecords = {\r\n            value: Array.from(new Set([...this.state.listRecords.value, sysId])),\r\n            displayValue: Array.from(new Set([...this.state.listRecords.displayValue, referenceData[0].value]))\r\n        }\r\n\r\n        this.setState({\r\n            listRecords,\r\n            loaded: false\r\n        })\r\n\r\n        this.props.onValueChange(this.props.name, listRecords.value.toString(), listRecords.displayValue.toString())\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.inputRef)\r\n    }\r\n\r\n    onClick(record) {\r\n        const isReference = this.props?.type === \"reference\"\r\n        return isReference ? this.referenceHandleClick(record) : this.listHandleClick(record)\r\n    }\r\n\r\n    onFocus(event) {\r\n        this.setState({focused: true});\r\n    }\r\n\r\n    onBlur(event) {\r\n        this.setState({focused: false});\r\n    }\r\n\r\n    renderListPills() {\r\n        return (\r\n            <Input.Start>{this.state.listRecords.displayValue.map((label) => <Pill label={label}\r\n                                                                                   canDismiss={true}/>)}</Input.Start>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {matchesCount, records, loading, loaded, focused, referenceRecord} = this.state;\r\n\r\n        const {label, declarativeUiActions, type, name} = this.props;\r\n\r\n        const hasMatches = matchesCount > 0;\r\n\r\n        const showResults = loading || (loaded && focused);\r\n\r\n        const isList = type === \"list\";\r\n\r\n\r\n        return (\r\n            <>\r\n                <style type=\"text/css\">{styles}</style>\r\n                <div className=\"swf-reference\" tabIndex=\"0\" onFocus={this.onFocus} onBlur={this.onBlur}>\r\n                    <Input\r\n                        internalRef={this.inputRef}\r\n                        className=\"swf-reference--input\"\r\n                        value={referenceRecord.displayValue}\r\n                        containerClass={isList ? \"list-field-group\" : \"\"}\r\n                        label={label}\r\n                        name={name}\r\n                        onInput={this.onChange}\r\n                    >\r\n                        {isList && this.renderListPills()}\r\n                        <Input.End><DeclarativeUIActions declarativeUiActions={declarativeUiActions}\r\n                                                         record={referenceRecord}/></Input.End>\r\n                    </Input>\r\n                    {showResults ? <ul className=\"result\" style={{top: `${this.inputRef?.current?.offsetHeight + 10}px`}}>\r\n                        {loading ? <span className=\"message\">Loading...</span> : null}\r\n                        {loaded && !hasMatches ? <span className=\"message\">No Results Found</span> : null}\r\n                        {loaded && <Result records={records} onClick={this.onClick}/>}\r\n                    </ul> : null}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nLookupField.defaultProps = {\r\n    label: \"\",\r\n    name: \"default\",\r\n    onValueChange: () => void 0,\r\n    declarativeUiActions: [],\r\n    type: \"reference\"\r\n}\r\n\r\nLookupField.propTypes = {\r\n    onValueChange: propTypes.func,\r\n    value: propTypes.string,\r\n    declarativeUiActions: propTypes.object,\r\n    label: propTypes.string,\r\n    name: propTypes.string,\r\n    type: propTypes.oneOfType([\"reference\", \"list\"]),\r\n    table: propTypes.string,\r\n    tableRecordSysId: propTypes.string\r\n}\r\n\r\nexport default LookupField"],"file":"LookupField.js"}