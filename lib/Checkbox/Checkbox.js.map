{"version":3,"sources":["../../src/Checkbox/Checkbox.js"],"names":["Checkbox","props","onChangeAction","bind","onInvalidAction","setIndeterminate","state","checkedValue","checked","invalidValue","invalid","checkboxRef","React","createRef","manageChecked","onChange","readonly","disabled","currentValue","newValue","canChange","value","setState","manageInvalid","onInvalid","input","current","querySelector","indeterminate","label","name","required","isIndeterminate","styles","e","Component","defaultProps","propTypes","oneOfType","bool","oneOf","string","func"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,Q;;;;;AACF,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACA,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBC,IAApB,+BAAtB;AACA,UAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBD,IAArB,+BAAvB;AACA,UAAKE,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBF,IAAtB,+BAAxB;AAEA,UAAKG,KAAL,GAAa;AACTC,MAAAA,YAAY,EAAE,MAAKN,KAAL,CAAWO,OADhB;AAETC,MAAAA,YAAY,EAAG,MAAKR,KAAL,CAAWS,OAFjB;AAGTC,MAAAA,WAAW,eAAEC,KAAK,CAACC,SAAN;AAHJ,KAAb;AANe;AAWlB;;;;WAED,0BAAgB;AAAA,wBAC0C,KAAKZ,KAD/C;AAAA,UACLa,aADK,eACLA,aADK;AAAA,UACUC,QADV,eACUA,QADV;AAAA,UACoBC,QADpB,eACoBA,QADpB;AAAA,UAC8BC,QAD9B,eAC8BA,QAD9B;AAEZ,UAAMC,YAAY,GAAG,KAAKZ,KAAL,CAAWC,YAAhC;AACA,UAAIY,QAAQ,GAAID,YAAY,KAAG,eAAhB,IAAoC,CAACA,YAApD;AACA,UAAIE,SAAS,GAAG,CAACJ,QAAD,IAAa,CAACC,QAA9B;AAEA,UAAGG,SAAS,IAAIN,aAAhB,EACKC,QAAQ,CAAC;AAACM,QAAAA,KAAK,EAAEH;AAAR,OAAD,CAAR,CADL,KAEK,IAAGE,SAAH,EACD,KAAKE,QAAL,CAAc;AAAEf,QAAAA,YAAY,EAAEY;AAAhB,OAAd,EADC,KAEA,IAAGD,YAAY,KAAG,eAAlB,EACD,KAAKb,gBAAL;AACP;;;WAED,2BAAiB;AAAA,yBACsB,KAAKJ,KAD3B;AAAA,UACNsB,aADM,gBACNA,aADM;AAAA,UACSC,SADT,gBACSA,SADT;AAEb,UAAMN,YAAY,GAAG,KAAKZ,KAAL,CAAWG,YAAhC;AAEA,UAAGc,aAAH,EACIC,SAAS,CAAC;AAACH,QAAAA,KAAK,EAAEH;AAAR,OAAD,CAAT,CADJ,KAGI,KAAKI,QAAL,CAAc;AAAEb,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACP;;;WAED,4BAAkB;AACd,UAAIgB,KAAK,GAAG,KAAKnB,KAAL,CAAWK,WAAX,CAAuBe,OAAvB,CAA+BC,aAA/B,CAA6C,OAA7C,CAAZ;AACA,UAAG,KAAK1B,KAAL,CAAWO,OAAX,KAAuB,eAA1B,EACIiB,KAAK,CAACG,aAAN,GAAsB,IAAtB;AACP;;;WAED,8BAAoB;AAAA,yBACyC,KAAK3B,KAD9C;AAAA,UACTO,OADS,gBACTA,OADS;AAAA,UACAE,OADA,gBACAA,OADA;AAAA,UACSI,aADT,gBACSA,aADT;AAAA,UACwBS,aADxB,gBACwBA,aADxB;AAAA,wBAEqB,KAAKjB,KAF1B;AAAA,UAETG,YAFS,eAETA,YAFS;AAAA,UAEKF,YAFL,eAEKA,YAFL;;AAIhB,UAAGO,aAAa,IAAIP,YAAY,KAAKC,OAArC,EACA;AACI,aAAKc,QAAL,CAAc;AAACf,UAAAA,YAAY,EAAEC;AAAf,SAAd;AACA,aAAKH,gBAAL;AACH;;AAED,UAAGkB,aAAa,IAAId,YAAY,KAAIC,OAApC,EACI,KAAKY,QAAL,CAAc;AAACb,QAAAA,YAAY,EAAEC;AAAf,OAAd;AAEP;;;WAED,6BAAoB;AAChB,WAAKL,gBAAL;AACH;;;WAED,kBAAS;AAAA;;AAAA,yBAQD,KAAKJ,KARJ;AAAA,UAGDgB,QAHC,gBAGDA,QAHC;AAAA,UAIDY,KAJC,gBAIDA,KAJC;AAAA,UAKDC,IALC,gBAKDA,IALC;AAAA,UAMDd,QANC,gBAMDA,QANC;AAAA,UAODe,QAPC,gBAODA,QAPC;AAUL,UAAIC,eAAe,GAAG,KAAK1B,KAAL,CAAWC,YAAX,KAA4B,eAAlD;AACA,UAAIA,YAAY,GAAIyB,eAAe,IAAI,KAAK1B,KAAL,CAAWC,YAAlD;AAEA,0BACI;AAAA,gCACI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAA,oBAAwB0B;AAAxB,UADJ,eAEI;AAAK,UAAA,SAAS,EAAE,4BAAW;AACvB,kCAAsB,IADC;AAEvB,wBAAYhB,QAFW;AAGvB,wBAAYD,QAHW;AAIvB,uBAAW,KAAKV,KAAL,CAAWG;AAJC,WAAX,CAAhB;AAMK,UAAA,GAAG,EAAI,KAAKH,KAAL,CAAWK,WANvB;AAOK,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACT,cAAL,EAAN;AAAA,WAPd;AAAA,kCASI;AACI,YAAA,SAAS,EAAE,gBADf;AAEI,YAAA,IAAI,EAAC,UAFT;AAGI,YAAA,OAAO,EAAEK,YAHb;AAII,YAAA,QAAQ,EAAEU,QAJd;AAKI,YAAA,QAAQ,EAAEc,QALd;AAMI,YAAA,IAAI,EAAED,IANV;AAOI,YAAA,KAAK,EAAG,KAAKxB,KAAL,CAAWC,YAAZ,GAA4B,MAA5B,GAAqC,OAPhD;AAQI,YAAA,SAAS,EAAE,mBAAA2B,CAAC;AAAA,qBAAI,MAAI,CAAC9B,eAAL,CAAqB8B,CAArB,CAAJ;AAAA,aARhB;AASI,YAAA,QAAQ,EAAE,kBAAAA,CAAC;AAAA,qBAAI,MAAI,CAAChC,cAAL,CAAoBgC,CAApB,CAAJ;AAAA;AATf,YATJ,eAoBI;AAAK,YAAA,SAAS,EAAE,sBAAhB;AAAA,uBACML,KAAK,iBAAI;AAAO,cAAA,SAAS,EAAE,gBAAlB;AAAA,wBAAqCA;AAArC,cADf,EAEME,QAAQ,iBAAI;AAAM,cAAA,SAAS,EAAE,mBAAjB;AAAA;AAAA,cAFlB;AAAA,YApBJ;AAAA,UAFJ;AAAA,QADJ;AA8BH;;;;EA1GkBnB,KAAK,CAACuB,S;;AA2G5B;AAEDnC,QAAQ,CAACoC,YAAT,GAAwB;AACpB5B,EAAAA,OAAO,EAAE,KADW;AAEpBS,EAAAA,QAAQ,EAAE,KAFU;AAGpBP,EAAAA,OAAO,EAAE,KAHW;AAIpBI,EAAAA,aAAa,EAAE,KAJK;AAKpBS,EAAAA,aAAa,EAAE,KALK;AAMpBP,EAAAA,QAAQ,EAAE,KANU;AAOpBe,EAAAA,QAAQ,EAAE;AAPU,CAAxB;AAUA/B,QAAQ,CAACqC,SAAT,GAAqB;AACjB7B,EAAAA,OAAO,EAAE6B,sBAAUC,SAAV,CAAoB,CACzBD,sBAAUE,IADe,EAEzBF,sBAAUG,KAAV,CAAgB,CAAC,eAAD,CAAhB,CAFyB,CAApB,CADQ;AAKjBvB,EAAAA,QAAQ,EAAEoB,sBAAUE,IALH;AAMjB7B,EAAAA,OAAO,EAAE2B,sBAAUE,IANF;AAOjBV,EAAAA,KAAK,EAAEQ,sBAAUI,MAPA;AAQjB3B,EAAAA,aAAa,EAAEuB,sBAAUE,IARR;AASjBhB,EAAAA,aAAa,EAAEc,sBAAUE,IATR;AAUjBT,EAAAA,IAAI,EAAEO,sBAAUI,MAVC;AAWjBzB,EAAAA,QAAQ,EAAEqB,sBAAUE,IAXH;AAYjBR,EAAAA,QAAQ,EAAEM,sBAAUE,IAZH;AAajBf,EAAAA,SAAS,EAAEa,sBAAUK,IAbJ;AAcjB3B,EAAAA,QAAQ,EAAEsB,sBAAUK;AAdH,CAArB;eAiBe1C,Q","sourcesContent":["import * as React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport classnames from \"classnames\";\r\n\r\nimport styles from \"./styles.scss\"\r\n\r\nclass Checkbox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChangeAction = this.onChangeAction.bind(this);\r\n        this.onInvalidAction = this.onInvalidAction.bind(this);\r\n        this.setIndeterminate = this.setIndeterminate.bind(this);\r\n\r\n        this.state = {\r\n            checkedValue: this.props.checked,\r\n            invalidValue:  this.props.invalid,\r\n            checkboxRef: React.createRef()\r\n        }\r\n    }\r\n\r\n    onChangeAction(){\r\n        const {manageChecked, onChange, readonly, disabled} = this.props;\r\n        const currentValue = this.state.checkedValue;\r\n        let newValue = (currentValue===\"indeterminate\") || !currentValue;\r\n        let canChange = !readonly && !disabled;\r\n\r\n        if(canChange && manageChecked)\r\n             onChange({value: currentValue});\r\n        else if(canChange)\r\n            this.setState({ checkedValue: newValue });\r\n        else if(currentValue===\"indeterminate\")\r\n            this.setIndeterminate()\r\n    }\r\n\r\n    onInvalidAction(){\r\n        const {manageInvalid, onInvalid} = this.props;\r\n        const currentValue = this.state.invalidValue;\r\n\r\n        if(manageInvalid)\r\n            onInvalid({value: currentValue});\r\n        else\r\n            this.setState({ invalidValue: true })\r\n    }\r\n\r\n    setIndeterminate(){\r\n        let input = this.state.checkboxRef.current.querySelector('input');\r\n        if(this.props.checked === \"indeterminate\")\r\n            input.indeterminate = true;\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        const {checked, invalid, manageChecked, manageInvalid} = this.props;\r\n        const {invalidValue, checkedValue} = this.state;\r\n\r\n        if(manageChecked && checkedValue !== checked)\r\n        {\r\n            this.setState({checkedValue: checked});\r\n            this.setIndeterminate();\r\n        }\r\n\r\n        if(manageInvalid && invalidValue!== invalid)\r\n            this.setState({invalidValue: invalid});\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setIndeterminate();\r\n    }\r\n\r\n    render() {\r\n\r\n        const {\r\n            disabled,\r\n            label,\r\n            name,\r\n            readonly,\r\n            required\r\n        } = this.props;\r\n\r\n        let isIndeterminate = this.state.checkedValue === 'indeterminate'\r\n        let checkedValue =  isIndeterminate || this.state.checkedValue;\r\n\r\n        return (\r\n            <>\r\n                <style type=\"text/css\">{styles}</style>\r\n                <div className={classnames({\r\n                    \"checkbox-container\": true,\r\n                    \"disabled\": disabled,\r\n                    \"readonly\": readonly,\r\n                    \"invalid\": this.state.invalidValue\r\n                    })}\r\n                     ref = {this.state.checkboxRef}\r\n                     onClick={() => this.onChangeAction()}\r\n                >\r\n                    <input\r\n                        className={\"checkbox-input\"}\r\n                        type=\"checkbox\"\r\n                        checked={checkedValue}\r\n                        disabled={disabled}\r\n                        required={required}\r\n                        name={name}\r\n                        value={(this.state.checkedValue) ? \"true\" : \"false\"}\r\n                        onInvalid={e => this.onInvalidAction(e)}\r\n                        onChange={e => this.onChangeAction(e)}\r\n                    />\r\n                    <div className={\"checkbox-information\"}>\r\n                        { label && <label className={\"checkbox-label\"}>{label}</label>}\r\n                        { required && <span className={\"checkbox-required\"}>*</span>}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n};\r\n\r\nCheckbox.defaultProps = {\r\n    checked: false,\r\n    disabled: false,\r\n    invalid: false,\r\n    manageChecked: false,\r\n    manageInvalid: false,\r\n    readonly: false,\r\n    required: false\r\n};\r\n\r\nCheckbox.propTypes = {\r\n    checked: propTypes.oneOfType([\r\n        propTypes.bool,\r\n        propTypes.oneOf([\"indeterminate\"])\r\n    ]),\r\n    disabled: propTypes.bool,\r\n    invalid: propTypes.bool,\r\n    label: propTypes.string,\r\n    manageChecked: propTypes.bool,\r\n    manageInvalid: propTypes.bool,\r\n    name: propTypes.string,\r\n    readonly: propTypes.bool,\r\n    required: propTypes.bool,\r\n    onInvalid: propTypes.func,\r\n    onChange: propTypes.func\r\n}\r\n\r\nexport default Checkbox"],"file":"Checkbox.js"}