"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllPossibleVariants = exports.getPopoverStyle = void 0;

var _constants = require("./constants");

var ALIGNMENT = _constants.POPOVER.ALIGNMENT,
    ARROW_SIZE = _constants.POPOVER.ARROW_SIZE,
    ARROW_ALIGN = _constants.POPOVER.ARROW_ALIGN,
    NO_ARROW_POSITIONS = _constants.POPOVER.NO_ARROW_POSITIONS,
    ARROW_SIDES = _constants.POPOVER.ARROW_SIDES,
    ARROW_SPACE = _constants.POPOVER.ARROW_SPACE,
    PADDING_SIZE = _constants.POPOVER.PADDING_SIZE;
var verticalAlignment = [ALIGNMENT.TOP, ALIGNMENT.CENTER, ALIGNMENT.BOTTOM];
var horizontalAlignment = [ALIGNMENT.START, ALIGNMENT.CENTER, ALIGNMENT.END];

var setArrowColor = function setArrowColor(align) {
  return "--arrow-".concat(align, "-color");
};

var setMargin = function setMargin(align) {
  return "margin-".concat(align);
};

var setArrowSize = function setArrowSize(align) {
  return "--arrow-".concat(align, "-size");
};

var hasArrowByPosition = function hasArrowByPosition(position, roundBorder) {
  return !(isOneOfNoArrow(position) || roundBorder && !isCenterArrow(position));
};

var isOneOfNoArrow = function isOneOfNoArrow(position) {
  var targetPosition = position.target.split('-');
  var contentPosition = position.content.split('-');
  var result = false;
  NO_ARROW_POSITIONS.forEach(function (_ref) {
    var content = _ref.content,
        target = _ref.target;
    var elTargetPosition = target.split('-');
    var elContentPosition = content.split('-');
    var isSameTargetParams = targetPosition[0] === elTargetPosition[0] && targetPosition[1] === elTargetPosition[1];
    var isSameContentParams = contentPosition[0] === elContentPosition[0] && contentPosition[1] === elContentPosition[1];
    if (isSameTargetParams && isSameContentParams) result = true;
  });
  return result;
};

var isCenterArrow = function isCenterArrow(position) {
  var contentPosition = position.content.split('-');
  return contentPosition[0] === ALIGNMENT.CENTER || contentPosition[1] === ALIGNMENT.CENTER;
};

var calculatePosition = function calculatePosition(alignType, arrayType, size) {
  var addPx = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var result = addPx;
  if (alignType === arrayType[1]) result = Math.round(size / 2) + addPx;else if (alignType === arrayType[2]) result = size + addPx;
  return result;
};

var getArrowAlignment = function getArrowAlignment(arrayType, align, parentSize, size) {
  if (align === arrayType[1]) return Math.round(parentSize / 2) - size;else if (align === arrayType[2]) return parentSize - size * 2;else return 0;
};

var getArrowStyles = function getArrowStyles(position, contentDimensions) {
  var style = {};
  var targetPosition = position.target.split('-');
  var contentPosition = position.content.split('-');
  var margin = "".concat(ARROW_SIZE + ARROW_SPACE, "px");
  var isDown = targetPosition[0] === ALIGNMENT.TOP && contentPosition[0] === ALIGNMENT.BOTTOM;
  var isLeft = targetPosition[1] === ALIGNMENT.END && contentPosition[1] === ALIGNMENT.START;
  var isRight = targetPosition[1] === ALIGNMENT.START && contentPosition[1] === ALIGNMENT.END;
  var isUp = targetPosition[0] === ALIGNMENT.BOTTOM && contentPosition[0] === ALIGNMENT.TOP;
  var hasArrow = true;
  var sideToZero = null;
  var colorSide = null;
  var top = 0;
  var left = 0;

  switch (true) {
    case isDown:
      sideToZero = ARROW_SIDES.BOTTOM;
      colorSide = ARROW_SIDES.TOP;
      top = contentDimensions.height;
      left = getArrowAlignment(horizontalAlignment, contentPosition[1], contentDimensions.width, ARROW_SIZE);
      break;

    case isRight:
      sideToZero = ARROW_SIDES.RIGHT;
      colorSide = ARROW_SIDES.LEFT;
      top = getArrowAlignment(verticalAlignment, contentPosition[0], contentDimensions.height, ARROW_SIZE);
      left = contentDimensions.width;
      break;

    case isLeft:
      sideToZero = ARROW_SIDES.LEFT;
      colorSide = ARROW_SIDES.RIGHT;
      top = getArrowAlignment(verticalAlignment, contentPosition[0], contentDimensions.height, ARROW_SIZE);
      left = -ARROW_SIZE;
      break;

    case isUp:
      sideToZero = ARROW_SIDES.TOP;
      colorSide = ARROW_SIDES.BOTTOM;
      top = -ARROW_SIZE;
      left = getArrowAlignment(horizontalAlignment, contentPosition[1], contentDimensions.width, ARROW_SIZE);
      break;

    default:
      hasArrow = false;
      break;
  }

  if (hasArrow) {
    style[ARROW_ALIGN.TOP] = "".concat(top, "px");
    style[ARROW_ALIGN.LEFT] = "".concat(left, "px");
    style[setArrowColor(colorSide)] = 'var(--popover-background)';
    style[setArrowSize(sideToZero)] = 0;
    style[setMargin(sideToZero)] = margin;
  }

  return {
    hasArrow: hasArrow,
    style: style
  };
};

var getTopAndLeft = function getTopAndLeft(targetPosition, targetDimensions, contentPosition, hasArrow, contentDimensions) {
  var verticalAlign = targetPosition[0];
  var horizontalAlign = targetPosition[1];
  var targetWidth = targetDimensions.width;
  var targetHeight = targetDimensions.height;
  var addPx = 0;
  var addPxY = 0;
  var needMoveContent = verticalAlign === ALIGNMENT.TOP && contentPosition[0] === ALIGNMENT.BOTTOM;
  var needMoveContentY = horizontalAlign === ALIGNMENT.START && contentPosition[1] === ALIGNMENT.END;
  if (needMoveContent && hasArrow) addPx = -ARROW_SIZE - ARROW_SPACE;
  if (needMoveContentY && hasArrow) addPxY = -ARROW_SIZE - ARROW_SPACE;
  var top = targetDimensions.y - contentDimensions.y + calculatePosition(verticalAlign, verticalAlignment, targetHeight, addPx);
  var left = targetDimensions.x - contentDimensions.x + calculatePosition(horizontalAlign, horizontalAlignment, targetWidth, addPxY);
  return {
    top: top,
    left: left
  };
};

var getTransform = function getTransform(contentPosition, width, height) {
  var verticalAlign = contentPosition[0];
  var horizontalAlign = contentPosition[1];
  var translateY = calculatePosition(verticalAlign, verticalAlignment, -height);
  var translateX = calculatePosition(horizontalAlign, horizontalAlignment, -width);
  return {
    x: translateX,
    y: translateY,
    stringValue: "translate3d(".concat(translateX, "px, ").concat(translateY, "px, 0)")
  };
};

var getStyleByPosition = function getStyleByPosition(position, targetDimensions, contentDimensions, windowParam, hasArrow, updatedContentSizes, padding) {
  var style = {};
  var targetPosition = position.target.split('-');
  var contentPosition = position.content.split('-');
  var top = 0;
  var left = 0;

  if (targetPosition) {
    var positionByTarget = getTopAndLeft(targetPosition, targetDimensions, contentPosition, hasArrow, contentDimensions);
    top = positionByTarget.top;
    left = positionByTarget.left;
  }

  style.top = "".concat(top, "px");
  style.left = "".concat(left, "px");
  style.transform = getTransform(contentPosition, updatedContentSizes.width, updatedContentSizes.height).stringValue;
  style.maxWidth = "".concat(updatedContentSizes.width - padding * 2, "px");
  style.maxHeight = "".concat(updatedContentSizes.height - padding * 2, "px");
  return style;
};

var getAllStyles = function getAllStyles(position, targetDimensions, contentDimensions, windowParam, hasArrow, updatedContentSizes, pudding) {
  var arrowStyles = {
    hasArrow: false,
    style: {}
  };
  var popoverStyles = getStyleByPosition(position, targetDimensions, contentDimensions, windowParam, hasArrow, updatedContentSizes, pudding);
  if (hasArrow) arrowStyles = getArrowStyles(position, updatedContentSizes);
  return {
    style: popoverStyles,
    hasArrow: arrowStyles.hasArrow,
    arrowStyle: arrowStyles.style
  };
};

var dividePosition = function dividePosition(position) {
  var splittedPos = position.split('-');
  return {
    vertical: splittedPos[0],
    horizontal: splittedPos[1]
  };
};

var getAvailableSize = function getAvailableSize(targetPosition, contentPosition, targetStart, targetSize, contentSize, windowStart, windowEnd, alignment, margin, padding) {
  var availableStart, availableEnd;
  var targetPos = targetStart + calculatePosition(targetPosition, alignment, targetSize);

  if (contentPosition === alignment[1]) {
    var minValue = windowEnd - targetPos > targetPos - windowStart ? targetPos - windowStart : windowEnd - targetPos;
    availableEnd = targetPos + minValue;
    availableStart = targetPos - minValue;
  } else if (contentPosition === alignment[0]) {
    availableEnd = windowEnd;
    availableStart = targetPos;
  } else {
    availableStart = windowStart;
    availableEnd = targetPos;
  }

  var availableSize = availableEnd - availableStart;
  return {
    size: contentSize + margin + padding * 2 > availableSize ? availableSize - margin : contentSize,
    needCut: contentSize + margin + padding * 2 > availableSize
  };
};

var getAvailableDimensions = function getAvailableDimensions(position, targetDimensions, contentDimensions, windowParam, hasArrow, padding) {
  var targetPosition = dividePosition(position.target);
  var contentPosition = dividePosition(position.content);
  var realContentWidth = contentDimensions.width;
  var realContentHeight = contentDimensions.height;
  var checkWithMargin = hasArrow && contentPosition.vertical === verticalAlignment[1];
  var margin = checkWithMargin ? ARROW_SIZE + ARROW_SPACE : 0;
  var availableWidth = getAvailableSize(targetPosition.horizontal, contentPosition.horizontal, targetDimensions.x, targetDimensions.width, realContentWidth, windowParam.startX, windowParam.endX, horizontalAlignment, margin, padding);
  checkWithMargin = hasArrow && contentPosition.horizontal === verticalAlignment[1];
  margin = checkWithMargin ? ARROW_SIZE + ARROW_SPACE : 0;
  var availableHeight = getAvailableSize(targetPosition.vertical, contentPosition.vertical, targetDimensions.y, targetDimensions.height, realContentHeight, windowParam.startY, windowParam.endY, verticalAlignment, margin, padding);
  return {
    content: {
      width: availableWidth.size,
      height: availableHeight.size
    },
    needCut: availableWidth.needCut || availableHeight.needCut
  };
};

var getPopoverStyle = function getPopoverStyle(positions, targetDimensions, contentDimensions, windowParam, hideTail, roundBorder, padding) {
  var result = {};
  var hasArrow, availableDimensions;
  var paddings = padding ? padding : PADDING_SIZE;

  for (var i = 0; i < positions.length; i++) {
    hasArrow = !hideTail && hasArrowByPosition(positions[i], roundBorder);
    availableDimensions = getAvailableDimensions(positions[i], targetDimensions, contentDimensions, windowParam, hasArrow, paddings);

    if (!availableDimensions.needCut) {
      var updatedSizes = availableDimensions.content;
      result = getAllStyles(positions[i], targetDimensions, contentDimensions, windowParam, hasArrow, updatedSizes, paddings);
      break;
    } else if (i === positions.length - 1) {
      hasArrow = !hideTail && hasArrowByPosition(positions[0], roundBorder);
      availableDimensions = getAvailableDimensions(positions[0], targetDimensions, contentDimensions, windowParam, hasArrow, paddings);
      result = getAllStyles(positions[0], targetDimensions, contentDimensions, windowParam, hasArrow, availableDimensions.content, paddings);
    }
  }

  return result;
};

exports.getPopoverStyle = getPopoverStyle;

var isOuterPosition = function isOuterPosition(position) {
  var targetPosition = dividePosition(position.target);
  var contentPosition = dividePosition(position.content);
  var isDown = targetPosition.vertical === ALIGNMENT.TOP && contentPosition.vertical === ALIGNMENT.BOTTOM;
  var isLeft = targetPosition.horizontal === ALIGNMENT.END && contentPosition.horizontal === ALIGNMENT.START;
  var isRight = targetPosition.horizontal === ALIGNMENT.START && contentPosition.horizontal === ALIGNMENT.END;
  var isUp = targetPosition.vertical === ALIGNMENT.BOTTOM && contentPosition.vertical === ALIGNMENT.TOP;
  return isDown || isLeft || isRight || isUp;
};

var getAllPossiblePositions = function getAllPossiblePositions() {
  var result = [];
  verticalAlignment.forEach(function (v) {
    horizontalAlignment.forEach(function (h) {
      result.push("".concat(v, "-").concat(h));
    });
  });
  return result;
};

var getAllPossibleVariants = function getAllPossibleVariants() {
  var result = [];
  var allPositions = getAllPossiblePositions();
  allPositions.forEach(function (targetPos) {
    allPositions.forEach(function (contentPos) {
      var position = {
        target: targetPos,
        content: contentPos
      };
      if (isOuterPosition(position)) result.unshift(position);else result.push(position);
    });
  });
  return result;
};

exports.getAllPossibleVariants = getAllPossibleVariants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Qb3BvdmVyL3V0aWxzLmpzIl0sIm5hbWVzIjpbIkFMSUdOTUVOVCIsIlBPUE9WRVIiLCJBUlJPV19TSVpFIiwiQVJST1dfQUxJR04iLCJOT19BUlJPV19QT1NJVElPTlMiLCJBUlJPV19TSURFUyIsIkFSUk9XX1NQQUNFIiwiUEFERElOR19TSVpFIiwidmVydGljYWxBbGlnbm1lbnQiLCJUT1AiLCJDRU5URVIiLCJCT1RUT00iLCJob3Jpem9udGFsQWxpZ25tZW50IiwiU1RBUlQiLCJFTkQiLCJzZXRBcnJvd0NvbG9yIiwiYWxpZ24iLCJzZXRNYXJnaW4iLCJzZXRBcnJvd1NpemUiLCJoYXNBcnJvd0J5UG9zaXRpb24iLCJwb3NpdGlvbiIsInJvdW5kQm9yZGVyIiwiaXNPbmVPZk5vQXJyb3ciLCJpc0NlbnRlckFycm93IiwidGFyZ2V0UG9zaXRpb24iLCJ0YXJnZXQiLCJzcGxpdCIsImNvbnRlbnRQb3NpdGlvbiIsImNvbnRlbnQiLCJyZXN1bHQiLCJmb3JFYWNoIiwiZWxUYXJnZXRQb3NpdGlvbiIsImVsQ29udGVudFBvc2l0aW9uIiwiaXNTYW1lVGFyZ2V0UGFyYW1zIiwiaXNTYW1lQ29udGVudFBhcmFtcyIsImNhbGN1bGF0ZVBvc2l0aW9uIiwiYWxpZ25UeXBlIiwiYXJyYXlUeXBlIiwic2l6ZSIsImFkZFB4IiwiTWF0aCIsInJvdW5kIiwiZ2V0QXJyb3dBbGlnbm1lbnQiLCJwYXJlbnRTaXplIiwiZ2V0QXJyb3dTdHlsZXMiLCJjb250ZW50RGltZW5zaW9ucyIsInN0eWxlIiwibWFyZ2luIiwiaXNEb3duIiwiaXNMZWZ0IiwiaXNSaWdodCIsImlzVXAiLCJoYXNBcnJvdyIsInNpZGVUb1plcm8iLCJjb2xvclNpZGUiLCJ0b3AiLCJsZWZ0IiwiaGVpZ2h0Iiwid2lkdGgiLCJSSUdIVCIsIkxFRlQiLCJnZXRUb3BBbmRMZWZ0IiwidGFyZ2V0RGltZW5zaW9ucyIsInZlcnRpY2FsQWxpZ24iLCJob3Jpem9udGFsQWxpZ24iLCJ0YXJnZXRXaWR0aCIsInRhcmdldEhlaWdodCIsImFkZFB4WSIsIm5lZWRNb3ZlQ29udGVudCIsIm5lZWRNb3ZlQ29udGVudFkiLCJ5IiwieCIsImdldFRyYW5zZm9ybSIsInRyYW5zbGF0ZVkiLCJ0cmFuc2xhdGVYIiwic3RyaW5nVmFsdWUiLCJnZXRTdHlsZUJ5UG9zaXRpb24iLCJ3aW5kb3dQYXJhbSIsInVwZGF0ZWRDb250ZW50U2l6ZXMiLCJwYWRkaW5nIiwicG9zaXRpb25CeVRhcmdldCIsInRyYW5zZm9ybSIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwiZ2V0QWxsU3R5bGVzIiwicHVkZGluZyIsImFycm93U3R5bGVzIiwicG9wb3ZlclN0eWxlcyIsImFycm93U3R5bGUiLCJkaXZpZGVQb3NpdGlvbiIsInNwbGl0dGVkUG9zIiwidmVydGljYWwiLCJob3Jpem9udGFsIiwiZ2V0QXZhaWxhYmxlU2l6ZSIsInRhcmdldFN0YXJ0IiwidGFyZ2V0U2l6ZSIsImNvbnRlbnRTaXplIiwid2luZG93U3RhcnQiLCJ3aW5kb3dFbmQiLCJhbGlnbm1lbnQiLCJhdmFpbGFibGVTdGFydCIsImF2YWlsYWJsZUVuZCIsInRhcmdldFBvcyIsIm1pblZhbHVlIiwiYXZhaWxhYmxlU2l6ZSIsIm5lZWRDdXQiLCJnZXRBdmFpbGFibGVEaW1lbnNpb25zIiwicmVhbENvbnRlbnRXaWR0aCIsInJlYWxDb250ZW50SGVpZ2h0IiwiY2hlY2tXaXRoTWFyZ2luIiwiYXZhaWxhYmxlV2lkdGgiLCJzdGFydFgiLCJlbmRYIiwiYXZhaWxhYmxlSGVpZ2h0Iiwic3RhcnRZIiwiZW5kWSIsImdldFBvcG92ZXJTdHlsZSIsInBvc2l0aW9ucyIsImhpZGVUYWlsIiwiYXZhaWxhYmxlRGltZW5zaW9ucyIsInBhZGRpbmdzIiwiaSIsImxlbmd0aCIsInVwZGF0ZWRTaXplcyIsImlzT3V0ZXJQb3NpdGlvbiIsImdldEFsbFBvc3NpYmxlUG9zaXRpb25zIiwidiIsImgiLCJwdXNoIiwiZ2V0QWxsUG9zc2libGVWYXJpYW50cyIsImFsbFBvc2l0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QUF0QztBQUNILENBVkQ7O0FBWUEsSUFBTTBFLHVCQUF1QixHQUFHLFNBQTFCQSx1QkFBMEIsR0FBTTtBQUNsQyxNQUFJaEcsTUFBTSxHQUFHLEVBQWI7QUFFQXJCLEVBQUFBLGlCQUFpQixDQUFDc0IsT0FBbEIsQ0FBMEIsVUFBQ2dHLENBQUQsRUFBTztBQUM3QmxILElBQUFBLG1CQUFtQixDQUFDa0IsT0FBcEIsQ0FBNEIsVUFBQWlHLENBQUMsRUFBSTtBQUM3QmxHLE1BQUFBLE1BQU0sQ0FBQ21HLElBQVAsV0FBZUYsQ0FBZixjQUFvQkMsQ0FBcEI7QUFDSCxLQUZEO0FBR0gsR0FKRDtBQU1BLFNBQU9sRyxNQUFQO0FBQ0gsQ0FWRDs7QUFhTyxJQUFNb0csc0JBQXNCLEdBQUcsU0FBekJBLHNCQUF5QixHQUFNO0FBQ3hDLE1BQUlwRyxNQUFNLEdBQUcsRUFBYjtBQUVBLE1BQUlxRyxZQUFZLEdBQUdMLHVCQUF1QixFQUExQztBQUNBSyxFQUFBQSxZQUFZLENBQUNwRyxPQUFiLENBQXFCLFVBQUN3RSxTQUFELEVBQWU7QUFDaEM0QixJQUFBQSxZQUFZLENBQUNwRyxPQUFiLENBQXFCLFVBQUFxRyxVQUFVLEVBQUk7QUFDL0IsVUFBSS9HLFFBQVEsR0FBRztBQUFDSyxRQUFBQSxNQUFNLEVBQUU2RSxTQUFUO0FBQW9CMUUsUUFBQUEsT0FBTyxFQUFFdUc7QUFBN0IsT0FBZjtBQUNBLFVBQUdQLGVBQWUsQ0FBQ3hHLFFBQUQsQ0FBbEIsRUFDSVMsTUFBTSxDQUFDdUcsT0FBUCxDQUFlaEgsUUFBZixFQURKLEtBR0lTLE1BQU0sQ0FBQ21HLElBQVAsQ0FBWTVHLFFBQVo7QUFDUCxLQU5EO0FBT0gsR0FSRDtBQVNBLFNBQVFTLE1BQVI7QUFDSCxDQWRNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQT1BPVkVSfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcclxuY29uc3Qge0FMSUdOTUVOVCwgQVJST1dfU0laRSwgQVJST1dfQUxJR04sIE5PX0FSUk9XX1BPU0lUSU9OUywgQVJST1dfU0lERVMsIEFSUk9XX1NQQUNFLCBQQURESU5HX1NJWkV9ID0gUE9QT1ZFUlxyXG5cclxuY29uc3QgdmVydGljYWxBbGlnbm1lbnQgPSBbQUxJR05NRU5ULlRPUCwgQUxJR05NRU5ULkNFTlRFUiwgQUxJR05NRU5ULkJPVFRPTV07XHJcbmNvbnN0IGhvcml6b250YWxBbGlnbm1lbnQgPSBbQUxJR05NRU5ULlNUQVJULCBBTElHTk1FTlQuQ0VOVEVSLCBBTElHTk1FTlQuRU5EXTtcclxuXHJcbmNvbnN0IHNldEFycm93Q29sb3IgPSAoYWxpZ24pID0+IHtcclxuICAgIHJldHVybiBgLS1hcnJvdy0ke2FsaWdufS1jb2xvcmA7XHJcbn1cclxuY29uc3Qgc2V0TWFyZ2luID0gKGFsaWduKSA9PiB7XHJcbiAgICByZXR1cm4gYG1hcmdpbi0ke2FsaWdufWA7XHJcbn1cclxuY29uc3Qgc2V0QXJyb3dTaXplID0gKGFsaWduKSA9PiB7XHJcbiAgICByZXR1cm4gYC0tYXJyb3ctJHthbGlnbn0tc2l6ZWA7XHJcbn1cclxuXHJcbmNvbnN0IGhhc0Fycm93QnlQb3NpdGlvbiA9IChwb3NpdGlvbiwgcm91bmRCb3JkZXIpID0+e1xyXG4gICAgcmV0dXJuICEoaXNPbmVPZk5vQXJyb3cocG9zaXRpb24pIHx8IChyb3VuZEJvcmRlciAmJiAhaXNDZW50ZXJBcnJvdyhwb3NpdGlvbikpKTtcclxufVxyXG5cclxuY29uc3QgaXNPbmVPZk5vQXJyb3cgPSAocG9zaXRpb24pID0+IHtcclxuICAgIGxldCB0YXJnZXRQb3NpdGlvbiA9IHBvc2l0aW9uLnRhcmdldC5zcGxpdCgnLScpO1xyXG4gICAgbGV0IGNvbnRlbnRQb3NpdGlvbiA9IHBvc2l0aW9uLmNvbnRlbnQuc3BsaXQoJy0nKTtcclxuXHJcbiAgICBsZXQgcmVzdWx0ID0gZmFsc2U7XHJcbiAgICBOT19BUlJPV19QT1NJVElPTlMuZm9yRWFjaCggKHtjb250ZW50LCB0YXJnZXR9KSA9PiB7XHJcbiAgICAgICAgbGV0IGVsVGFyZ2V0UG9zaXRpb24gPSB0YXJnZXQuc3BsaXQoJy0nKTtcclxuICAgICAgICBsZXQgZWxDb250ZW50UG9zaXRpb24gPSBjb250ZW50LnNwbGl0KCctJyk7XHJcbiAgICAgICAgbGV0IGlzU2FtZVRhcmdldFBhcmFtcyA9IHRhcmdldFBvc2l0aW9uWzBdID09PSBlbFRhcmdldFBvc2l0aW9uWzBdICYmIHRhcmdldFBvc2l0aW9uWzFdID09PSBlbFRhcmdldFBvc2l0aW9uWzFdO1xyXG4gICAgICAgIGxldCBpc1NhbWVDb250ZW50UGFyYW1zID0gY29udGVudFBvc2l0aW9uWzBdID09PSBlbENvbnRlbnRQb3NpdGlvblswXSAmJiBjb250ZW50UG9zaXRpb25bMV0gPT09IGVsQ29udGVudFBvc2l0aW9uWzFdO1xyXG5cclxuICAgICAgICBpZihpc1NhbWVUYXJnZXRQYXJhbXMgJiYgaXNTYW1lQ29udGVudFBhcmFtcylcclxuICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcclxuICAgIH0pXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5jb25zdCBpc0NlbnRlckFycm93ID0gKHBvc2l0aW9uKSA9PiB7XHJcbiAgICBsZXQgY29udGVudFBvc2l0aW9uID0gcG9zaXRpb24uY29udGVudC5zcGxpdCgnLScpO1xyXG4gICAgcmV0dXJuIGNvbnRlbnRQb3NpdGlvblswXSA9PT0gQUxJR05NRU5ULkNFTlRFUiB8fCBjb250ZW50UG9zaXRpb25bMV0gPT09IEFMSUdOTUVOVC5DRU5URVI7XHJcbn1cclxuXHJcbmNvbnN0IGNhbGN1bGF0ZVBvc2l0aW9uID0gKGFsaWduVHlwZSwgYXJyYXlUeXBlLCBzaXplLCBhZGRQeCA9IDApID0+IHtcclxuICAgIGxldCByZXN1bHQgPSBhZGRQeDtcclxuICAgIGlmKGFsaWduVHlwZSA9PT0gYXJyYXlUeXBlWzFdKVxyXG4gICAgICAgIHJlc3VsdCA9IE1hdGgucm91bmQoc2l6ZS8yKSArIGFkZFB4O1xyXG4gICAgZWxzZSBpZihhbGlnblR5cGUgPT09IGFycmF5VHlwZVsyXSlcclxuICAgICAgICByZXN1bHQgPSBzaXplICsgYWRkUHg7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuY29uc3QgZ2V0QXJyb3dBbGlnbm1lbnQgPSAoYXJyYXlUeXBlLCBhbGlnbiwgcGFyZW50U2l6ZSwgc2l6ZSkgPT4ge1xyXG4gICAgaWYoYWxpZ24gPT09IGFycmF5VHlwZVsxXSlcclxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChwYXJlbnRTaXplLzIpIC0gc2l6ZTtcclxuICAgIGVsc2UgaWYgKCBhbGlnbiA9PT0gYXJyYXlUeXBlWzJdKVxyXG4gICAgICAgIHJldHVybiBwYXJlbnRTaXplIC0gc2l6ZSoyO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiAwO1xyXG59XHJcblxyXG5jb25zdCBnZXRBcnJvd1N0eWxlcyA9IChwb3NpdGlvbiwgY29udGVudERpbWVuc2lvbnMpID0+IHtcclxuICAgIGxldCBzdHlsZSA9IHt9O1xyXG4gICAgbGV0IHRhcmdldFBvc2l0aW9uID0gcG9zaXRpb24udGFyZ2V0LnNwbGl0KCctJyk7XHJcbiAgICBsZXQgY29udGVudFBvc2l0aW9uID0gcG9zaXRpb24uY29udGVudC5zcGxpdCgnLScpO1xyXG4gICAgbGV0IG1hcmdpbiA9IGAke0FSUk9XX1NJWkUgKyBBUlJPV19TUEFDRX1weGBcclxuXHJcbiAgICBsZXQgaXNEb3duID0gdGFyZ2V0UG9zaXRpb25bMF0gPT09IEFMSUdOTUVOVC5UT1AgJiYgY29udGVudFBvc2l0aW9uWzBdID09PSBBTElHTk1FTlQuQk9UVE9NO1xyXG4gICAgbGV0IGlzTGVmdCA9IHRhcmdldFBvc2l0aW9uWzFdID09PSBBTElHTk1FTlQuRU5EICYmIGNvbnRlbnRQb3NpdGlvblsxXSA9PT0gQUxJR05NRU5ULlNUQVJUO1xyXG4gICAgbGV0IGlzUmlnaHQgPSB0YXJnZXRQb3NpdGlvblsxXSA9PT0gQUxJR05NRU5ULlNUQVJUICYmIGNvbnRlbnRQb3NpdGlvblsxXSA9PT0gQUxJR05NRU5ULkVORDtcclxuICAgIGxldCBpc1VwID0gdGFyZ2V0UG9zaXRpb25bMF0gPT09IEFMSUdOTUVOVC5CT1RUT00gJiYgY29udGVudFBvc2l0aW9uWzBdID09PSBBTElHTk1FTlQuVE9QO1xyXG5cclxuICAgIGxldCBoYXNBcnJvdyA9IHRydWU7XHJcbiAgICBsZXQgc2lkZVRvWmVybyA9IG51bGw7XHJcbiAgICBsZXQgY29sb3JTaWRlID0gbnVsbDtcclxuICAgIGxldCB0b3AgPSAwO1xyXG4gICAgbGV0IGxlZnQgPSAwO1xyXG5cclxuICAgIHN3aXRjaCh0cnVlKXtcclxuICAgICAgICBjYXNlIGlzRG93biA6XHJcbiAgICAgICAgICAgIHNpZGVUb1plcm8gPSBBUlJPV19TSURFUy5CT1RUT007XHJcbiAgICAgICAgICAgIGNvbG9yU2lkZSA9IEFSUk9XX1NJREVTLlRPUDtcclxuXHJcbiAgICAgICAgICAgIHRvcCA9IGNvbnRlbnREaW1lbnNpb25zLmhlaWdodDtcclxuICAgICAgICAgICAgbGVmdCA9IGdldEFycm93QWxpZ25tZW50KGhvcml6b250YWxBbGlnbm1lbnQsIGNvbnRlbnRQb3NpdGlvblsxXSwgY29udGVudERpbWVuc2lvbnMud2lkdGgsIEFSUk9XX1NJWkUpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBpc1JpZ2h0IDpcclxuICAgICAgICAgICAgc2lkZVRvWmVybyA9IEFSUk9XX1NJREVTLlJJR0hUO1xyXG4gICAgICAgICAgICBjb2xvclNpZGUgPSBBUlJPV19TSURFUy5MRUZUO1xyXG5cclxuICAgICAgICAgICAgdG9wID0gZ2V0QXJyb3dBbGlnbm1lbnQodmVydGljYWxBbGlnbm1lbnQsIGNvbnRlbnRQb3NpdGlvblswXSwgY29udGVudERpbWVuc2lvbnMuaGVpZ2h0LCBBUlJPV19TSVpFKTtcclxuICAgICAgICAgICAgbGVmdCA9IGNvbnRlbnREaW1lbnNpb25zLndpZHRoO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBpc0xlZnQ6XHJcbiAgICAgICAgICAgIHNpZGVUb1plcm8gPSBBUlJPV19TSURFUy5MRUZUO1xyXG4gICAgICAgICAgICBjb2xvclNpZGUgPSBBUlJPV19TSURFUy5SSUdIVDtcclxuXHJcbiAgICAgICAgICAgIHRvcCA9IGdldEFycm93QWxpZ25tZW50KHZlcnRpY2FsQWxpZ25tZW50LCBjb250ZW50UG9zaXRpb25bMF0sIGNvbnRlbnREaW1lbnNpb25zLmhlaWdodCwgQVJST1dfU0laRSk7XHJcbiAgICAgICAgICAgIGxlZnQgPSAtQVJST1dfU0laRTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgaXNVcDpcclxuICAgICAgICAgICAgc2lkZVRvWmVybyA9IEFSUk9XX1NJREVTLlRPUDtcclxuICAgICAgICAgICAgY29sb3JTaWRlID0gQVJST1dfU0lERVMuQk9UVE9NO1xyXG5cclxuICAgICAgICAgICAgdG9wID0gLUFSUk9XX1NJWkU7XHJcbiAgICAgICAgICAgIGxlZnQgPSBnZXRBcnJvd0FsaWdubWVudChob3Jpem9udGFsQWxpZ25tZW50LCBjb250ZW50UG9zaXRpb25bMV0sIGNvbnRlbnREaW1lbnNpb25zLndpZHRoLCBBUlJPV19TSVpFKTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGhhc0Fycm93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKGhhc0Fycm93KXtcclxuICAgICAgICBzdHlsZVtBUlJPV19BTElHTi5UT1BdID0gYCR7dG9wfXB4YDtcclxuICAgICAgICBzdHlsZVtBUlJPV19BTElHTi5MRUZUXSA9IGAke2xlZnR9cHhgO1xyXG5cclxuICAgICAgICBzdHlsZVtzZXRBcnJvd0NvbG9yKGNvbG9yU2lkZSldID0gJ3ZhcigtLXBvcG92ZXItYmFja2dyb3VuZCknO1xyXG4gICAgICAgIHN0eWxlW3NldEFycm93U2l6ZShzaWRlVG9aZXJvKV0gPSAwO1xyXG4gICAgICAgIHN0eWxlW3NldE1hcmdpbihzaWRlVG9aZXJvKV0gPSBtYXJnaW47XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge2hhc0Fycm93OiBoYXNBcnJvdywgc3R5bGU6IHN0eWxlfTtcclxufVxyXG5cclxuY29uc3QgZ2V0VG9wQW5kTGVmdCA9ICh0YXJnZXRQb3NpdGlvbiwgdGFyZ2V0RGltZW5zaW9ucywgY29udGVudFBvc2l0aW9uLCBoYXNBcnJvdywgY29udGVudERpbWVuc2lvbnMpID0+IHtcclxuICAgIGxldCB2ZXJ0aWNhbEFsaWduID0gdGFyZ2V0UG9zaXRpb25bMF07XHJcbiAgICBsZXQgaG9yaXpvbnRhbEFsaWduID0gdGFyZ2V0UG9zaXRpb25bMV07XHJcblxyXG4gICAgbGV0IHRhcmdldFdpZHRoID0gdGFyZ2V0RGltZW5zaW9ucy53aWR0aDtcclxuICAgIGxldCB0YXJnZXRIZWlnaHQgPSB0YXJnZXREaW1lbnNpb25zLmhlaWdodDtcclxuXHJcbiAgICBsZXQgYWRkUHggPSAwO1xyXG4gICAgbGV0IGFkZFB4WSA9IDBcclxuXHJcbiAgICBsZXQgbmVlZE1vdmVDb250ZW50ID0gdmVydGljYWxBbGlnbiA9PT0gQUxJR05NRU5ULlRPUCAmJiBjb250ZW50UG9zaXRpb25bMF0gPT09IEFMSUdOTUVOVC5CT1RUT007XHJcbiAgICBsZXQgbmVlZE1vdmVDb250ZW50WSA9IGhvcml6b250YWxBbGlnbiA9PT0gQUxJR05NRU5ULlNUQVJUICYmIGNvbnRlbnRQb3NpdGlvblsxXSA9PT0gQUxJR05NRU5ULkVORDtcclxuXHJcbiAgICBpZihuZWVkTW92ZUNvbnRlbnQgJiYgaGFzQXJyb3cpXHJcbiAgICAgICAgYWRkUHggPSAtQVJST1dfU0laRSAtIEFSUk9XX1NQQUNFO1xyXG5cclxuICAgIGlmKG5lZWRNb3ZlQ29udGVudFkgJiYgaGFzQXJyb3cpXHJcbiAgICAgICAgYWRkUHhZID0gLUFSUk9XX1NJWkUgLSBBUlJPV19TUEFDRTtcclxuXHJcbiAgICBsZXQgdG9wID0gdGFyZ2V0RGltZW5zaW9ucy55IC0gY29udGVudERpbWVuc2lvbnMueSAgKyBjYWxjdWxhdGVQb3NpdGlvbih2ZXJ0aWNhbEFsaWduLCB2ZXJ0aWNhbEFsaWdubWVudCwgdGFyZ2V0SGVpZ2h0LCBhZGRQeCk7XHJcbiAgICBsZXQgbGVmdCA9IHRhcmdldERpbWVuc2lvbnMueCAtIGNvbnRlbnREaW1lbnNpb25zLnggKyBjYWxjdWxhdGVQb3NpdGlvbihob3Jpem9udGFsQWxpZ24sIGhvcml6b250YWxBbGlnbm1lbnQsIHRhcmdldFdpZHRoLCBhZGRQeFkpO1xyXG5cclxuICAgIHJldHVybiB7dG9wOiB0b3AsIGxlZnQ6IGxlZnR9O1xyXG59XHJcblxyXG5jb25zdCBnZXRUcmFuc2Zvcm0gPSAoY29udGVudFBvc2l0aW9uLCB3aWR0aCwgaGVpZ2h0KSA9PiB7XHJcbiAgICBsZXQgdmVydGljYWxBbGlnbiA9IGNvbnRlbnRQb3NpdGlvblswXTtcclxuICAgIGxldCBob3Jpem9udGFsQWxpZ24gPSBjb250ZW50UG9zaXRpb25bMV07XHJcblxyXG4gICAgbGV0IHRyYW5zbGF0ZVkgPSBjYWxjdWxhdGVQb3NpdGlvbih2ZXJ0aWNhbEFsaWduLCB2ZXJ0aWNhbEFsaWdubWVudCwgLWhlaWdodCk7XHJcbiAgICBsZXQgdHJhbnNsYXRlWCA9IGNhbGN1bGF0ZVBvc2l0aW9uKGhvcml6b250YWxBbGlnbiwgaG9yaXpvbnRhbEFsaWdubWVudCwgLXdpZHRoKTtcclxuXHJcbiAgICByZXR1cm4ge3g6IHRyYW5zbGF0ZVgsIHk6IHRyYW5zbGF0ZVksIHN0cmluZ1ZhbHVlOiBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVYfXB4LCAke3RyYW5zbGF0ZVl9cHgsIDApYH07XHJcbn1cclxuXHJcbmNvbnN0IGdldFN0eWxlQnlQb3NpdGlvbiA9IChwb3NpdGlvbiwgdGFyZ2V0RGltZW5zaW9ucywgY29udGVudERpbWVuc2lvbnMsIHdpbmRvd1BhcmFtLCBoYXNBcnJvdywgdXBkYXRlZENvbnRlbnRTaXplcywgcGFkZGluZykgPT4ge1xyXG4gICAgbGV0IHN0eWxlID0ge307XHJcbiAgICBsZXQgdGFyZ2V0UG9zaXRpb24gPSBwb3NpdGlvbi50YXJnZXQuc3BsaXQoJy0nKTtcclxuICAgIGxldCBjb250ZW50UG9zaXRpb24gPSBwb3NpdGlvbi5jb250ZW50LnNwbGl0KCctJyk7XHJcblxyXG4gICAgbGV0IHRvcCA9IDA7XHJcbiAgICBsZXQgbGVmdCA9IDA7XHJcbiAgICBpZih0YXJnZXRQb3NpdGlvbil7XHJcbiAgICAgICAgbGV0IHBvc2l0aW9uQnlUYXJnZXQgPSBnZXRUb3BBbmRMZWZ0KHRhcmdldFBvc2l0aW9uLCB0YXJnZXREaW1lbnNpb25zLCBjb250ZW50UG9zaXRpb24sIGhhc0Fycm93LCBjb250ZW50RGltZW5zaW9ucyk7XHJcbiAgICAgICAgdG9wID0gcG9zaXRpb25CeVRhcmdldC50b3A7XHJcbiAgICAgICAgbGVmdCA9IHBvc2l0aW9uQnlUYXJnZXQubGVmdDtcclxuICAgIH1cclxuXHJcbiAgICAgc3R5bGUudG9wID0gYCR7dG9wfXB4YDtcclxuICAgIHN0eWxlLmxlZnQgPSBgJHtsZWZ0fXB4YDtcclxuICAgIHN0eWxlLnRyYW5zZm9ybSA9IGdldFRyYW5zZm9ybShjb250ZW50UG9zaXRpb24sIHVwZGF0ZWRDb250ZW50U2l6ZXMud2lkdGgsIHVwZGF0ZWRDb250ZW50U2l6ZXMuaGVpZ2h0KS5zdHJpbmdWYWx1ZTtcclxuICAgIHN0eWxlLm1heFdpZHRoID0gYCR7dXBkYXRlZENvbnRlbnRTaXplcy53aWR0aCAtIHBhZGRpbmcqMn1weGA7XHJcbiAgICBzdHlsZS5tYXhIZWlnaHQgPSBgJHt1cGRhdGVkQ29udGVudFNpemVzLmhlaWdodCAtIHBhZGRpbmcqMn1weGA7XHJcblxyXG4gICAgcmV0dXJuIHN0eWxlO1xyXG59XHJcblxyXG5jb25zdCBnZXRBbGxTdHlsZXMgPSAocG9zaXRpb24sIHRhcmdldERpbWVuc2lvbnMsIGNvbnRlbnREaW1lbnNpb25zLCB3aW5kb3dQYXJhbSwgaGFzQXJyb3csIHVwZGF0ZWRDb250ZW50U2l6ZXMsIHB1ZGRpbmcpID0+IHtcclxuICAgIGxldCBhcnJvd1N0eWxlcyA9IHsgaGFzQXJyb3c6IGZhbHNlLCBzdHlsZTp7fX07XHJcbiAgICBsZXQgcG9wb3ZlclN0eWxlcyA9IGdldFN0eWxlQnlQb3NpdGlvbihwb3NpdGlvbiwgdGFyZ2V0RGltZW5zaW9ucywgY29udGVudERpbWVuc2lvbnMsIHdpbmRvd1BhcmFtLCBoYXNBcnJvdywgdXBkYXRlZENvbnRlbnRTaXplcywgcHVkZGluZyk7XHJcblxyXG4gICAgaWYoaGFzQXJyb3cpXHJcbiAgICAgICAgYXJyb3dTdHlsZXMgPSBnZXRBcnJvd1N0eWxlcyhwb3NpdGlvbiwgdXBkYXRlZENvbnRlbnRTaXplcyk7XHJcblxyXG4gICAgcmV0dXJuIHtzdHlsZTogcG9wb3ZlclN0eWxlcywgaGFzQXJyb3c6IGFycm93U3R5bGVzLmhhc0Fycm93LCBhcnJvd1N0eWxlOiBhcnJvd1N0eWxlcy5zdHlsZX07XHJcbn1cclxuXHJcbmNvbnN0IGRpdmlkZVBvc2l0aW9uID0gKHBvc2l0aW9uKSA9PiB7XHJcbiAgICBsZXQgc3BsaXR0ZWRQb3MgPSBwb3NpdGlvbi5zcGxpdCgnLScpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB2ZXJ0aWNhbDogc3BsaXR0ZWRQb3NbMF0sXHJcbiAgICAgICAgaG9yaXpvbnRhbDogc3BsaXR0ZWRQb3NbMV1cclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgZ2V0QXZhaWxhYmxlU2l6ZSA9ICh0YXJnZXRQb3NpdGlvbiwgY29udGVudFBvc2l0aW9uLCB0YXJnZXRTdGFydCwgdGFyZ2V0U2l6ZSwgY29udGVudFNpemUsIHdpbmRvd1N0YXJ0LCB3aW5kb3dFbmQsIGFsaWdubWVudCwgbWFyZ2luLCBwYWRkaW5nKSA9PiB7XHJcbiAgICBsZXQgYXZhaWxhYmxlU3RhcnQsIGF2YWlsYWJsZUVuZDtcclxuXHJcbiAgICBsZXQgdGFyZ2V0UG9zID0gdGFyZ2V0U3RhcnQgKyBjYWxjdWxhdGVQb3NpdGlvbih0YXJnZXRQb3NpdGlvbiwgYWxpZ25tZW50LCB0YXJnZXRTaXplKTtcclxuICAgIGlmKGNvbnRlbnRQb3NpdGlvbiA9PT0gYWxpZ25tZW50WzFdKXtcclxuICAgICAgICBsZXQgbWluVmFsdWUgPSAod2luZG93RW5kLXRhcmdldFBvcykgPiAodGFyZ2V0UG9zLXdpbmRvd1N0YXJ0KSA/IHRhcmdldFBvcy13aW5kb3dTdGFydCA6IHdpbmRvd0VuZC10YXJnZXRQb3M7XHJcbiAgICAgICAgYXZhaWxhYmxlRW5kID0gdGFyZ2V0UG9zK21pblZhbHVlO1xyXG4gICAgICAgIGF2YWlsYWJsZVN0YXJ0ID0gdGFyZ2V0UG9zLW1pblZhbHVlO1xyXG4gICAgfSBlbHNlIGlmIChjb250ZW50UG9zaXRpb24gPT09IGFsaWdubWVudFswXSl7XHJcbiAgICAgICAgYXZhaWxhYmxlRW5kID0gd2luZG93RW5kO1xyXG4gICAgICAgIGF2YWlsYWJsZVN0YXJ0ID0gdGFyZ2V0UG9zO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBhdmFpbGFibGVTdGFydCA9IHdpbmRvd1N0YXJ0O1xyXG4gICAgICAgIGF2YWlsYWJsZUVuZCA9IHRhcmdldFBvcztcclxuICAgIH1cclxuXHJcbiAgICBsZXQgYXZhaWxhYmxlU2l6ZSA9IGF2YWlsYWJsZUVuZCAtIGF2YWlsYWJsZVN0YXJ0O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzaXplOiAoY29udGVudFNpemUgKyBtYXJnaW4gKyBwYWRkaW5nKjIpPmF2YWlsYWJsZVNpemUgPyBhdmFpbGFibGVTaXplIC0gbWFyZ2luOiBjb250ZW50U2l6ZSxcclxuICAgICAgICBuZWVkQ3V0OiAoY29udGVudFNpemUgKyBtYXJnaW4gKyBwYWRkaW5nKjIpPmF2YWlsYWJsZVNpemVcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgZ2V0QXZhaWxhYmxlRGltZW5zaW9ucyA9IChwb3NpdGlvbiwgdGFyZ2V0RGltZW5zaW9ucywgY29udGVudERpbWVuc2lvbnMsIHdpbmRvd1BhcmFtLCBoYXNBcnJvdywgcGFkZGluZykgPT4ge1xyXG4gICAgbGV0IHRhcmdldFBvc2l0aW9uID0gZGl2aWRlUG9zaXRpb24ocG9zaXRpb24udGFyZ2V0KTtcclxuICAgIGxldCBjb250ZW50UG9zaXRpb24gPSBkaXZpZGVQb3NpdGlvbihwb3NpdGlvbi5jb250ZW50KTtcclxuXHJcbiAgICBsZXQgcmVhbENvbnRlbnRXaWR0aCA9IGNvbnRlbnREaW1lbnNpb25zLndpZHRoO1xyXG4gICAgbGV0IHJlYWxDb250ZW50SGVpZ2h0ID0gY29udGVudERpbWVuc2lvbnMuaGVpZ2h0O1xyXG5cclxuICAgIGxldCBjaGVja1dpdGhNYXJnaW4gPSBoYXNBcnJvdyAmJiBjb250ZW50UG9zaXRpb24udmVydGljYWwgPT09IHZlcnRpY2FsQWxpZ25tZW50WzFdO1xyXG4gICAgbGV0IG1hcmdpbiA9IChjaGVja1dpdGhNYXJnaW4pID8gQVJST1dfU0laRSArIEFSUk9XX1NQQUNFIDogMDtcclxuXHJcbiAgICBsZXQgYXZhaWxhYmxlV2lkdGggPSBnZXRBdmFpbGFibGVTaXplKFxyXG4gICAgICAgIHRhcmdldFBvc2l0aW9uLmhvcml6b250YWwsIGNvbnRlbnRQb3NpdGlvbi5ob3Jpem9udGFsLFxyXG4gICAgICAgIHRhcmdldERpbWVuc2lvbnMueCwgdGFyZ2V0RGltZW5zaW9ucy53aWR0aCwgcmVhbENvbnRlbnRXaWR0aCxcclxuICAgICAgICB3aW5kb3dQYXJhbS5zdGFydFgsIHdpbmRvd1BhcmFtLmVuZFgsIGhvcml6b250YWxBbGlnbm1lbnQsIG1hcmdpbiwgcGFkZGluZyk7XHJcblxyXG4gICAgY2hlY2tXaXRoTWFyZ2luID0gaGFzQXJyb3cgJiYgY29udGVudFBvc2l0aW9uLmhvcml6b250YWwgPT09IHZlcnRpY2FsQWxpZ25tZW50WzFdO1xyXG4gICAgbWFyZ2luID0gKGNoZWNrV2l0aE1hcmdpbikgPyBBUlJPV19TSVpFICsgQVJST1dfU1BBQ0UgOiAwO1xyXG5cclxuICAgIGxldCBhdmFpbGFibGVIZWlnaHQgPSBnZXRBdmFpbGFibGVTaXplKFxyXG4gICAgICAgIHRhcmdldFBvc2l0aW9uLnZlcnRpY2FsLCBjb250ZW50UG9zaXRpb24udmVydGljYWwsXHJcbiAgICAgICAgdGFyZ2V0RGltZW5zaW9ucy55LCB0YXJnZXREaW1lbnNpb25zLmhlaWdodCwgcmVhbENvbnRlbnRIZWlnaHQsXHJcbiAgICAgICAgd2luZG93UGFyYW0uc3RhcnRZLCB3aW5kb3dQYXJhbS5lbmRZLCB2ZXJ0aWNhbEFsaWdubWVudCwgbWFyZ2luLCBwYWRkaW5nKVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY29udGVudDoge1xyXG4gICAgICAgICAgICB3aWR0aDogYXZhaWxhYmxlV2lkdGguc2l6ZSxcclxuICAgICAgICAgICAgaGVpZ2h0OiBhdmFpbGFibGVIZWlnaHQuc2l6ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbmVlZEN1dDogYXZhaWxhYmxlV2lkdGgubmVlZEN1dCB8fCBhdmFpbGFibGVIZWlnaHQubmVlZEN1dFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGdldFBvcG92ZXJTdHlsZSA9IChwb3NpdGlvbnMsIHRhcmdldERpbWVuc2lvbnMsIGNvbnRlbnREaW1lbnNpb25zLCB3aW5kb3dQYXJhbSwgaGlkZVRhaWwsIHJvdW5kQm9yZGVyLCBwYWRkaW5nKSA9PiB7XHJcbiAgICBsZXQgcmVzdWx0ID0ge307XHJcbiAgICBsZXQgaGFzQXJyb3csIGF2YWlsYWJsZURpbWVuc2lvbnM7XHJcbiAgICBsZXQgcGFkZGluZ3MgPSAocGFkZGluZykgPyBwYWRkaW5nOiBQQURESU5HX1NJWkU7XHJcblxyXG4gICAgZm9yKGxldCBpID0gMDsgaTxwb3NpdGlvbnMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIGhhc0Fycm93ID0gIWhpZGVUYWlsICYmIGhhc0Fycm93QnlQb3NpdGlvbihwb3NpdGlvbnNbaV0sIHJvdW5kQm9yZGVyKTtcclxuICAgICAgICBhdmFpbGFibGVEaW1lbnNpb25zID0gZ2V0QXZhaWxhYmxlRGltZW5zaW9ucyhwb3NpdGlvbnNbaV0sIHRhcmdldERpbWVuc2lvbnMsIGNvbnRlbnREaW1lbnNpb25zLCB3aW5kb3dQYXJhbSwgaGFzQXJyb3csIHBhZGRpbmdzKVxyXG5cclxuICAgICAgICBpZighYXZhaWxhYmxlRGltZW5zaW9ucy5uZWVkQ3V0KSB7XHJcbiAgICAgICAgICAgIGxldCB1cGRhdGVkU2l6ZXMgPSBhdmFpbGFibGVEaW1lbnNpb25zLmNvbnRlbnQ7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGdldEFsbFN0eWxlcyhwb3NpdGlvbnNbaV0sIHRhcmdldERpbWVuc2lvbnMsIGNvbnRlbnREaW1lbnNpb25zLCB3aW5kb3dQYXJhbSwgaGFzQXJyb3csIHVwZGF0ZWRTaXplcywgcGFkZGluZ3MpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9ZWxzZSBpZihpID09PSBwb3NpdGlvbnMubGVuZ3RoIC0xKXtcclxuICAgICAgICAgICAgaGFzQXJyb3cgPSAhaGlkZVRhaWwgJiYgaGFzQXJyb3dCeVBvc2l0aW9uKHBvc2l0aW9uc1swXSwgcm91bmRCb3JkZXIpO1xyXG4gICAgICAgICAgICBhdmFpbGFibGVEaW1lbnNpb25zID0gZ2V0QXZhaWxhYmxlRGltZW5zaW9ucyhwb3NpdGlvbnNbMF0sIHRhcmdldERpbWVuc2lvbnMsIGNvbnRlbnREaW1lbnNpb25zLCB3aW5kb3dQYXJhbSwgaGFzQXJyb3csIHBhZGRpbmdzKVxyXG5cclxuICAgICAgICAgICAgcmVzdWx0ID0gZ2V0QWxsU3R5bGVzKHBvc2l0aW9uc1swXSwgdGFyZ2V0RGltZW5zaW9ucywgY29udGVudERpbWVuc2lvbnMsIHdpbmRvd1BhcmFtLCBoYXNBcnJvdywgYXZhaWxhYmxlRGltZW5zaW9ucy5jb250ZW50LCBwYWRkaW5ncyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcblxyXG5cclxuY29uc3QgaXNPdXRlclBvc2l0aW9uID0gKHBvc2l0aW9uKSA9PiB7XHJcbiAgICBsZXQgdGFyZ2V0UG9zaXRpb24gPSBkaXZpZGVQb3NpdGlvbihwb3NpdGlvbi50YXJnZXQpO1xyXG4gICAgbGV0IGNvbnRlbnRQb3NpdGlvbiA9IGRpdmlkZVBvc2l0aW9uKHBvc2l0aW9uLmNvbnRlbnQpO1xyXG5cclxuICAgIGxldCBpc0Rvd24gPSB0YXJnZXRQb3NpdGlvbi52ZXJ0aWNhbCA9PT0gQUxJR05NRU5ULlRPUCAmJiBjb250ZW50UG9zaXRpb24udmVydGljYWwgPT09IEFMSUdOTUVOVC5CT1RUT007XHJcbiAgICBsZXQgaXNMZWZ0ID0gdGFyZ2V0UG9zaXRpb24uaG9yaXpvbnRhbCA9PT0gQUxJR05NRU5ULkVORCAmJiBjb250ZW50UG9zaXRpb24uaG9yaXpvbnRhbD09PSBBTElHTk1FTlQuU1RBUlQ7XHJcbiAgICBsZXQgaXNSaWdodCA9IHRhcmdldFBvc2l0aW9uLmhvcml6b250YWwgPT09IEFMSUdOTUVOVC5TVEFSVCAmJiBjb250ZW50UG9zaXRpb24uaG9yaXpvbnRhbCA9PT0gQUxJR05NRU5ULkVORDtcclxuICAgIGxldCBpc1VwID0gdGFyZ2V0UG9zaXRpb24udmVydGljYWwgPT09IEFMSUdOTUVOVC5CT1RUT00gJiYgY29udGVudFBvc2l0aW9uLnZlcnRpY2FsID09PSBBTElHTk1FTlQuVE9QO1xyXG5cclxuICAgIHJldHVybihpc0Rvd24gfHwgaXNMZWZ0IHx8IGlzUmlnaHQgfHwgaXNVcClcclxufVxyXG5cclxuY29uc3QgZ2V0QWxsUG9zc2libGVQb3NpdGlvbnMgPSAoKSA9PiB7XHJcbiAgICBsZXQgcmVzdWx0ID0gW11cclxuXHJcbiAgICB2ZXJ0aWNhbEFsaWdubWVudC5mb3JFYWNoKCh2KSA9PiB7XHJcbiAgICAgICAgaG9yaXpvbnRhbEFsaWdubWVudC5mb3JFYWNoKGggPT4ge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChgJHt2fS0ke2h9YCk7XHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRBbGxQb3NzaWJsZVZhcmlhbnRzID0gKCkgPT4ge1xyXG4gICAgbGV0IHJlc3VsdCA9IFtdO1xyXG5cclxuICAgIGxldCBhbGxQb3NpdGlvbnMgPSBnZXRBbGxQb3NzaWJsZVBvc2l0aW9ucygpO1xyXG4gICAgYWxsUG9zaXRpb25zLmZvckVhY2goKHRhcmdldFBvcykgPT4ge1xyXG4gICAgICAgIGFsbFBvc2l0aW9ucy5mb3JFYWNoKGNvbnRlbnRQb3MgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcG9zaXRpb24gPSB7dGFyZ2V0OiB0YXJnZXRQb3MsIGNvbnRlbnQ6IGNvbnRlbnRQb3N9O1xyXG4gICAgICAgICAgICBpZihpc091dGVyUG9zaXRpb24ocG9zaXRpb24pKVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnVuc2hpZnQocG9zaXRpb24pXHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBvc2l0aW9uKVxyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG4gICAgcmV0dXJuICByZXN1bHQ7XHJcbn1cclxuXHJcblxyXG5cclxuIl19