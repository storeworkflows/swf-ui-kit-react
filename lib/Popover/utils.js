"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPopoverStyle = void 0;
var alignment = {
  TOP: "top",
  CENTER: "center",
  BOTTOM: "bottom",
  START: "start",
  END: "end"
};
var verticalAlignment = [alignment.TOP, alignment.CENTER, alignment.BOTTOM];
var horizontalAlignment = [alignment.START, alignment.CENTER, alignment.END];
var noArrow = [{
  target: "top-start",
  content: "bottom-end"
}, {
  target: "top-end",
  content: "bottom-start"
}, {
  target: "bottom-end",
  content: "top-start"
}, {
  target: "bottom-start",
  content: "top-end"
}];
var arrowBorder = {
  RIGHT: '--popover-arrow-border-right',
  LEFT: '--popover-arrow-border-left',
  BOTTOM: '--popover-arrow-border-bottom',
  TOP: '--popover-arrow-border-top'
};
var arrowAlign = {
  TOP: '--popover-arrow-top',
  LEFT: '--popover-arrow-left'
};
var arrowSize = 16;
var arrowBorderWidth = 1;
var diagonal = (arrowSize + 2 * arrowBorderWidth) * Math.sqrt(2);
var halfDiagonal = diagonal / 2;

var isOneOfNoArrow = function isOneOfNoArrow(position) {
  var targetPosition = position.target.split('-');
  var contentPosition = position.content.split('-');
  var result = false;
  noArrow.forEach(function (_ref) {
    var content = _ref.content,
        target = _ref.target;
    var elTargetPosition = target.split('-');
    var elContentPosition = content.split('-');
    var isSameTargetParams = targetPosition[0] === elTargetPosition[0] && targetPosition[1] === elTargetPosition[1];
    var isSameContentParams = contentPosition[0] === elContentPosition[0] && contentPosition[1] === elContentPosition[1];
    if (isSameTargetParams && isSameContentParams) result = true;
  });
  return result;
};

var calculatePosition = function calculatePosition(alignType, arrayType, startPosition) {
  var addPx = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var result = "".concat(addPx, "px");
  if (alignType === arrayType[1]) result = "".concat(startPosition / 2 + addPx, "px");else if (alignType === arrayType[2]) result = "".concat(startPosition + addPx, "px");
  return result;
};

var calculateArrowPosition = function calculateArrowPosition(alignType, arrayType, startPosition) {
  var additionalParam = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var result = "".concat(additionalParam + 8, "px ");
  if (alignType === arrayType[1]) result = "".concat(startPosition / 2 - halfDiagonal + additionalParam + 2, "px");else if (alignType === arrayType[2]) result = "".concat(startPosition - diagonal + additionalParam - 5, "px");
  return result;
};

var getArrowStyles = function getArrowStyles(position, contentDimensions) {
  var style = {};
  var borderStyle = "".concat(arrowBorderWidth, "px solid rgba(0, 0, 0, 0.3)");
  var targetPosition = position.target.split('-');
  var contentPosition = position.content.split('-');
  var hasArrow = true;
  var margin = "".concat(halfDiagonal, "px");
  if (isOneOfNoArrow(position)) hasArrow = false;else if (targetPosition[0] === alignment.TOP && contentPosition[0] === alignment.BOTTOM) {
    //down
    style[arrowBorder.BOTTOM] = borderStyle;
    style[arrowBorder.RIGHT] = borderStyle;
    style[arrowAlign.TOP] = contentDimensions.height + "px";
    style[arrowAlign.LEFT] = calculateArrowPosition(contentPosition[1], horizontalAlignment, contentDimensions.width);
    style['margin-bottom'] = margin;
  } else if (targetPosition[1] === alignment.START && contentPosition[1] === alignment.END) {
    //right
    style[arrowBorder.RIGHT] = borderStyle;
    style[arrowBorder.TOP] = borderStyle;
    style[arrowAlign.TOP] = calculateArrowPosition(contentPosition[0], verticalAlignment, contentDimensions.height, halfDiagonal);
    style[arrowAlign.LEFT] = "".concat(contentDimensions.width - halfDiagonal + 2, "px");
    style['margin-right'] = margin;
  } else if (targetPosition[1] === alignment.END && contentPosition[1] === alignment.START) {
    //left
    style[arrowBorder.LEFT] = borderStyle;
    style[arrowBorder.BOTTOM] = borderStyle;
    style[arrowAlign.TOP] = "".concat(calculateArrowPosition(contentPosition[0], verticalAlignment, contentDimensions.height, halfDiagonal));
    style[arrowAlign.LEFT] = "".concat(-halfDiagonal + 2, "px");
    style['margin-left'] = margin;
  } else if (targetPosition[0] === alignment.BOTTOM && contentPosition[0] === alignment.TOP) {
    //up
    style[arrowBorder.LEFT] = borderStyle;
    style[arrowBorder.TOP] = borderStyle;
    style[arrowAlign.TOP] = 0;
    style[arrowAlign.LEFT] = calculateArrowPosition(contentPosition[1], horizontalAlignment, contentDimensions.width);
    style['margin-top'] = margin;
  } else hasArrow = false;
  return {
    hasArrow: hasArrow,
    style: style
  };
};

var getStyleByPosition = function getStyleByPosition(position, targetDimensions, contentDimensions, windowWidth, hideTail) {
  var style = {};
  var targetPosition = position.target.split('-');
  var contentPosition = position.content.split('-');

  if (targetPosition) {
    var verticalAlign = targetPosition[0];
    var horizontalAlign = targetPosition[1];
    var targetWidth = targetDimensions.width;
    var targetHeight = targetDimensions.height;
    var addPx = 0;
    var addPxY = 0;
    var needMoveContent = verticalAlign === alignment.TOP && contentPosition[0] === alignment.BOTTOM;
    var needMoveContentY = horizontalAlign === alignment.START && contentPosition[1] === alignment.END;
    if (needMoveContent && !hideTail && !isOneOfNoArrow(position)) addPx = -halfDiagonal;
    if (needMoveContentY && !hideTail && !isOneOfNoArrow(position)) addPxY = -halfDiagonal;
    style.top = calculatePosition(verticalAlign, verticalAlignment, targetHeight, addPx);
    style.left = calculatePosition(horizontalAlign, horizontalAlignment, targetWidth, addPxY);
  }

  var x, y;

  if (contentPosition) {
    var _verticalAlign = contentPosition[0];
    var _horizontalAlign = contentPosition[1];
    var contentWidth = contentDimensions.width;
    var contentHeight = contentDimensions.height;
    y = calculatePosition(_verticalAlign, verticalAlignment, -contentHeight);
    x = calculatePosition(_horizontalAlign, horizontalAlignment, -contentWidth);
    style.transform = "translate3d(".concat(x, ", ").concat(y, ", 0)");
  }

  var resultX = targetDimensions.x + parseInt(style.left.replace("px", '')) + parseInt(x.replace("px", ''));
  var resultY = targetDimensions.y + parseInt(style.top.replace("px", '')) + parseInt(y.replace("px", ''));
  var isXVisible = resultX > 0 && resultX + contentDimensions.width < windowWidth;
  var isYVisible = resultY > 0;
  var isVisible = isXVisible && isYVisible;
  console.log("visibility", isVisible);
  return {
    style: style,
    isVisible: isVisible
  };
};

var getPopoverStyle = function getPopoverStyle(positions, targetDimensions, contentDimensions, windowWidth, hideTail) {
  var style = {};
  var result;
  var arrowStyles = {
    hasArrow: false,
    style: {}
  };

  for (var i = 0; i < positions.length; i++) {
    result = getStyleByPosition(positions[i], targetDimensions, contentDimensions, windowWidth, hideTail);

    if (result.isVisible) {
      style = result.style;
      if (!hideTail) arrowStyles = getArrowStyles(positions[i], contentDimensions);
      break;
    } else if (i === positions.length - 1) {
      style = getStyleByPosition(positions[0], targetDimensions, contentDimensions, windowWidth, hideTail).style;
      if (!hideTail) arrowStyles = getArrowStyles(positions[0], contentDimensions);
    }
  }

  return {
    style: style,
    hasArrow: arrowStyles.hasArrow,
    arrowStyle: arrowStyles.style
  };
};

exports.getPopoverStyle = getPopoverStyle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,