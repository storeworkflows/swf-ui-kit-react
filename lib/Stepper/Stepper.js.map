{"version":3,"sources":["../../src/Stepper/Stepper.js"],"names":["Stepper","props","state","selected","Math","min","steps","length","selectedItem","itemWidth","containerWidth","containerRightPos","stepperRef","stepperItemRef","setState","clientWidth","stepsPerPage","prevProps","prevState","snapshot","index","id","onStepClick","direction","newContainerRightValue","maxRightPos","max","hideLabels","icon","palette","iconSize","map","step","isSelected","isBeforeSelected","iconColor","progress","finished","unfinished","disabled","selectStep","elm","label","sublabel","vertical","showCompletedCount","arrows","styles","width","right","renderSteps","onArrowClick","color","size","React","Component","propTypes","PropTypes","arrayOf","object","string","bool","number","func","defaultProps","circle","link"],"mappings":"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","sourcesContent":["import styles from \"./Stepper.scss\";\r\nimport Step from './Step/Step';\r\nimport Link from './Link/Link';\r\nimport Arrows from \"./Arrows/Arrows\";\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport classnames from \"classnames\";\r\nimport { createCssVariables } from \"./utils\";\r\n\r\nclass Stepper extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selected: Math.min(props.steps.length - 1, props.selectedItem - 1),\r\n            itemWidth: 0,\r\n            containerWidth: '100%',\r\n            containerRightPos: 0\r\n        };\r\n        this.stepperRef = false;\r\n        this.stepperItemRef = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            containerWidth: this.stepperRef.clientWidth / this.props.stepsPerPage * this.props.steps.length || '100%'\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.stepperItemRef.clientWidth !== prevState.itemWidth) {\r\n            this.setState({\r\n                itemWidth: this.stepperItemRef.clientWidth,\r\n            });\r\n        }\r\n    }\r\n\r\n    selectStep(index, id) {\r\n        if (this.props.onStepClick) {\r\n            this.props.onStepClick({ index, id });\r\n        }\r\n\r\n        return () => {\r\n            this.setState({\r\n                selected: index\r\n            })\r\n        }\r\n    }\r\n\r\n    onArrowClick() {\r\n        const { containerRightPos, itemWidth } = this.state;\r\n        const { steps } = this.props;\r\n\r\n        return (direction) => {\r\n            const newContainerRightValue = containerRightPos + (itemWidth * 2 * direction);\r\n            const maxRightPos = (itemWidth * (steps.length * 2 - 1) - this.stepperRef.clientWidth + 40);\r\n\r\n            this.setState({\r\n                containerRightPos: Math.min(Math.max(newContainerRightValue, 0), maxRightPos)\r\n            })\r\n        }\r\n    }\r\n\r\n    renderSteps() {\r\n        const { steps, hideLabels, palette: { icon }, iconSize } = this.props;\r\n        const { selected } = this.state;\r\n\r\n        return (\r\n            steps.map((step, index) => {\r\n                const isSelected = selected === index;\r\n                const isBeforeSelected = selected > index;\r\n                const iconColor = (isSelected || isBeforeSelected)\r\n                && (step.progress !== 'none' && step.progress !== 'partial')\r\n                || step.progress === 'done'\r\n                    ? (icon.finished || 'white') : (icon.unfinished || 'black');\r\n\r\n                return (\r\n                    <React.Fragment key={'step' + index}>\r\n                        <div\r\n                            className={classnames({\r\n                                'stepper-item': true,\r\n                                '--selected': isSelected,\r\n                                '--before-selected': isBeforeSelected,\r\n                                '--disabled': step.disabled\r\n                            })}\r\n                            onClick={!step.disabled && this.selectStep(index, step.id)}\r\n                            ref={elm => this.stepperItemRef = elm}\r\n                        >\r\n                            <Step\r\n                                icon={step.icon}\r\n                                iconColor={iconColor}\r\n                                iconSize={iconSize}\r\n                                label={step.label}\r\n                                sublabel={step.sublabel}\r\n                                progress={step.progress}\r\n                                hideLabel={hideLabels}\r\n                            />\r\n                        </div>\r\n                        {(index !== steps.length - 1) &&\r\n                        <div\r\n                            className={classnames({\r\n                                'stepper-item': true,\r\n                                '--before-selected': isBeforeSelected\r\n                            })}\r\n                        >\r\n                            <Link/>\r\n                        </div>\r\n                        }\r\n                    </React.Fragment>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { palette, vertical, showCompletedCount, steps, stepsPerPage, arrows } = this.props;\r\n        const { selected, containerWidth, containerRightPos } = this.state;\r\n\r\n        return (\r\n            <div\r\n                className='stepper'\r\n                ref={elm => this.stepperRef = elm}\r\n            >\r\n                <style type=\"text/css\">{createCssVariables(palette) + styles}</style>\r\n                <div\r\n                    className={classnames({\r\n                        'stepper-container': true,\r\n                        '--vertical': vertical\r\n                    })}\r\n                    style={{\r\n                        width: containerWidth,\r\n                        right: containerRightPos\r\n                    }}\r\n                >\r\n                    {this.renderSteps()}\r\n                </div>\r\n                {stepsPerPage &&\r\n                <Arrows\r\n                    onArrowClick={this.onArrowClick()}\r\n                    arrowsColor={arrows.color}\r\n                    arrowsSize={arrows.size}\r\n                />\r\n                }\r\n                <div className=\"stepper-counter\">\r\n                    {showCompletedCount &&\r\n                    `${selected + 1}/${steps.length} Completed`\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nStepper.propTypes = {\r\n    steps: PropTypes.arrayOf(PropTypes.object),\r\n    palette: PropTypes.object,\r\n    iconSize: PropTypes.string,\r\n    arrows: PropTypes.object,\r\n    hideLabels: PropTypes.bool,\r\n    vertical: PropTypes.bool,\r\n    showCompletedCount: PropTypes.bool,\r\n    selectedItem: PropTypes.number,\r\n    onStepClick: PropTypes.func,\r\n    stepsPerPage: PropTypes.number\r\n}\r\n\r\nStepper.defaultProps = {\r\n    steps: [],\r\n    palette: {\r\n        icon: {\r\n            finished: '',\r\n            unfinished: ''\r\n        },\r\n        circle: '',\r\n        link: '',\r\n        label: ''\r\n    },\r\n    arrows: {\r\n        color: 'black',\r\n        size: 'md'\r\n    },\r\n    iconSize: 'sm',\r\n    hideLabels: false,\r\n    vertical: false,\r\n    showCompletedCount: false,\r\n    selectedItem: 1\r\n}\r\n\r\nexport default Stepper;"],"file":"Stepper.js"}