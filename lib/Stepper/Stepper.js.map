{"version":3,"sources":["../../src/Stepper/Stepper.js"],"names":["Stepper","props","state","selected","Math","min","steps","length","selectedItem","index","id","onStepClick","setState","hideLabels","icon","palette","iconSize","map","step","isSelected","isBeforeSelected","iconColor","progress","finished","unfinished","disabled","selectStep","label","sublabel","vertical","showCompletedCount","styles","renderSteps","React","Component","propTypes","PropTypes","arrayOf","object","string","bool","number","func","defaultProps","circle","link"],"mappings":"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","sourcesContent":["import styles from \"./Stepper.scss\";\nimport Step from './Step/Step';\nimport Link from './Link/Link';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classnames from \"classnames\";\nimport { createCssVariables } from \"./utils\";\n\nclass Stepper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { selected: Math.min(props.steps.length - 1, props.selectedItem - 1) };\n    }\n\n    selectStep(index, id) {\n        if (this.props.onStepClick) {\n            this.props.onStepClick({ index, id });\n        }\n\n        return () => {\n            this.setState({\n                selected: index\n            })\n        }\n    }\n\n    renderSteps() {\n        const { steps, hideLabels, palette: { icon }, iconSize } = this.props;\n\n        return (\n            steps.map((step, index) => {\n                const isSelected = this.state.selected === index;\n                const isBeforeSelected = this.state.selected > index;\n                const iconColor = (isSelected || isBeforeSelected)\n                    && (step.progress !== 'none' && step.progress !== 'partial')\n                    || step.progress === 'done'\n                    ? (icon.finished || 'white') : (icon.unfinished || 'black');\n\n                return (\n                    <React.Fragment key={'step' + index}>\n                        <div\n                            className={classnames({\n                                'stepper-item': true,\n                                '--selected': isSelected,\n                                '--before-selected': isBeforeSelected,\n                                '--disabled': step.disabled\n                            })}\n                            onClick={!step.disabled && this.selectStep(index, step.id)}\n                        >\n                            <Step\n                                icon={step.icon}\n                                iconColor={iconColor}\n                                iconSize={iconSize}\n                                label={step.label}\n                                sublabel={step.sublabel}\n                                progress={step.progress}\n                                hideLabel={hideLabels}\n                            />\n                        </div>\n                        {(index !== steps.length - 1) &&\n                        <div\n                            className={classnames({\n                                'stepper-item': true,\n                                '--before-selected': isBeforeSelected\n                            })}\n                        >\n                            <Link/>\n                        </div>\n                        }\n                    </React.Fragment>\n                )\n            })\n        )\n    }\n\n    render() {\n        const { palette, vertical, showCompletedCount, steps } = this.props;\n\n        return (\n            <>\n                <style type=\"text/css\">{createCssVariables(palette) + styles}</style>\n                <div\n                    className={classnames({\n                        'stepper': true,\n                        'stepper-container': true,\n                        '--vertical': vertical\n                    })}\n                >\n                    {this.renderSteps()}\n                </div>\n                <div className=\"stepper-counter\">\n                    {showCompletedCount &&\n                        `${this.state.selected + 1}/${steps.length} Completed`\n                    }\n                </div>\n            </>\n        )\n    }\n}\n\nStepper.propTypes = {\n    steps: PropTypes.arrayOf(PropTypes.object),\n    palette: PropTypes.object,\n    iconSize: PropTypes.string,\n    hideLabels: PropTypes.bool,\n    vertical: PropTypes.bool,\n    showCompletedCount: PropTypes.bool,\n    selectedItem: PropTypes.number,\n    onStepClick: PropTypes.func\n}\n\nStepper.defaultProps = {\n    steps: [],\n    palette: {\n        icon: {\n            finished: '',\n            unfinished: ''\n        },\n        circle: '',\n        link: '',\n        label: ''\n    },\n    iconSize: 'sm',\n    hideLabels: false,\n    vertical: false,\n    showCompletedCount: false,\n    selectedItem: 1\n}\n\nexport default Stepper;"],"file":"Stepper.js"}